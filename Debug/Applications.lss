
Applications.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  000024b4  00002528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000246c  00000000  00000000  00002620  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001055  00000000  00000000  00004a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000079da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000088c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000097d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a22f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 14 12 	call	0x2428	; 0x2428 <main>
      7a:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e2       	ldi	r26, 0x2E	; 46
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e2       	ldi	r24, 0x2E	; 46
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <EEPROM_voidWriteByte>:
 */

#include "EEPROM_Interface.h"

void EEPROM_voidWriteByte(u8 address,u8 data)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <EEPROM_voidWriteByte+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	89 83       	std	Y+1, r24	; 0x01
     b42:	6a 83       	std	Y+2, r22	; 0x02
	//set up EEPROM address
	EE_EEARL=(u8)address;
     b44:	ee e3       	ldi	r30, 0x3E	; 62
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	80 83       	st	Z, r24
	EE_EEARH=(u8)(address>>8);  //address is 10 bit
     b4c:	ef e3       	ldi	r30, 0x3F	; 63
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	88 2f       	mov	r24, r24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	89 2f       	mov	r24, r25
     b58:	99 0f       	add	r25, r25
     b5a:	99 0b       	sbc	r25, r25
     b5c:	80 83       	st	Z, r24
	//set up data register
	EE_EEDR=data;
     b5e:	ed e3       	ldi	r30, 0x3D	; 61
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	80 83       	st	Z, r24
	//enable write operation
	set_bit(EE_EECR,EE_EECR_EEMWE);
     b66:	ac e3       	ldi	r26, 0x3C	; 60
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	ec e3       	ldi	r30, 0x3C	; 60
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	84 60       	ori	r24, 0x04	; 4
     b72:	8c 93       	st	X, r24
	set_bit(EE_EECR,EE_EECR_EEWE);
     b74:	ac e3       	ldi	r26, 0x3C	; 60
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	ec e3       	ldi	r30, 0x3C	; 60
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	82 60       	ori	r24, 0x02	; 2
     b80:	8c 93       	st	X, r24
	//wait until write operation is complete
	while(get_bit(EE_EECR,EE_EECR_EEWE)==0);
     b82:	ec e3       	ldi	r30, 0x3C	; 60
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	86 95       	lsr	r24
     b8a:	88 2f       	mov	r24, r24
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	81 70       	andi	r24, 0x01	; 1
     b90:	90 70       	andi	r25, 0x00	; 0
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	b1 f3       	breq	.-20     	; 0xb82 <EEPROM_voidWriteByte+0x4c>
}
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <EEPROM_voidReadByte>:

u8 EEPROM_voidReadByte(u8 address)
{
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	0f 92       	push	r0
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	89 83       	std	Y+1, r24	; 0x01
	//set up EEPROM address
	EE_EEARL=(u8)address;
     bac:	ee e3       	ldi	r30, 0x3E	; 62
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	80 83       	st	Z, r24
	EE_EEARH=(u8)(address>>8);  //address is 10 bit
     bb4:	ef e3       	ldi	r30, 0x3F	; 63
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	89 2f       	mov	r24, r25
     bc0:	99 0f       	add	r25, r25
     bc2:	99 0b       	sbc	r25, r25
     bc4:	80 83       	st	Z, r24
	//enable read operation
	set_bit(EE_EECR,EE_EECR_EERE);
     bc6:	ac e3       	ldi	r26, 0x3C	; 60
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	ec e3       	ldi	r30, 0x3C	; 60
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	8c 93       	st	X, r24
	return EE_EEDR;
     bd4:	ed e3       	ldi	r30, 0x3D	; 61
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
}
     bda:	0f 90       	pop	r0
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <EEPROM_voidEraseAll>:

void EEPROM_voidEraseAll(void)
{
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <EEPROM_voidEraseAll+0x6>
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
	u16 EEPROM_Add ;
	for(EEPROM_Add = 0 ; EEPROM_Add < Max_Array ; EEPROM_Add++)
     bec:	1a 82       	std	Y+2, r1	; 0x02
     bee:	19 82       	std	Y+1, r1	; 0x01
     bf0:	09 c0       	rjmp	.+18     	; 0xc04 <EEPROM_voidEraseAll+0x22>
	{
		EEPROM_voidWriteByte( EEPROM_Add , 0x00 );
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	0e 94 9b 05 	call	0xb36	; 0xb36 <EEPROM_voidWriteByte>
}

void EEPROM_voidEraseAll(void)
{
	u16 EEPROM_Add ;
	for(EEPROM_Add = 0 ; EEPROM_Add < Max_Array ; EEPROM_Add++)
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	9a 83       	std	Y+2, r25	; 0x02
     c02:	89 83       	std	Y+1, r24	; 0x01
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	24 e0       	ldi	r18, 0x04	; 4
     c0a:	80 30       	cpi	r24, 0x00	; 0
     c0c:	92 07       	cpc	r25, r18
     c0e:	88 f3       	brcs	.-30     	; 0xbf2 <EEPROM_voidEraseAll+0x10>
	{
		EEPROM_voidWriteByte( EEPROM_Add , 0x00 );
	}
}
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <EEPROM_voidWriteNBytes>:

void EEPROM_voidWriteNBytes(u16 eeprom_Address, u8 *RamAddr, u8 NoOfBytes)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <EEPROM_voidWriteNBytes+0x6>
     c20:	00 d0       	rcall	.+0      	; 0xc22 <EEPROM_voidWriteNBytes+0x8>
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	7c 83       	std	Y+4, r23	; 0x04
     c2e:	6b 83       	std	Y+3, r22	; 0x03
     c30:	4d 83       	std	Y+5, r20	; 0x05
	if(NULL != *RamAddr)
     c32:	eb 81       	ldd	r30, Y+3	; 0x03
     c34:	fc 81       	ldd	r31, Y+4	; 0x04
     c36:	80 81       	ld	r24, Z
     c38:	88 23       	and	r24, r24
     c3a:	c1 f0       	breq	.+48     	; 0xc6c <EEPROM_voidWriteNBytes+0x52>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <EEPROM_voidWriteNBytes+0x4c>
	{
		while(NoOfBytes !=  0)
		{
			EEPROM_voidWriteByte(eeprom_Address, *RamAddr);
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	eb 81       	ldd	r30, Y+3	; 0x03
     c42:	fc 81       	ldd	r31, Y+4	; 0x04
     c44:	90 81       	ld	r25, Z
     c46:	69 2f       	mov	r22, r25
     c48:	0e 94 9b 05 	call	0xb36	; 0xb36 <EEPROM_voidWriteByte>
			eeprom_Address++;
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
			RamAddr++;
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	9c 81       	ldd	r25, Y+4	; 0x04
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	9c 83       	std	Y+4, r25	; 0x04
     c5e:	8b 83       	std	Y+3, r24	; 0x03
			NoOfBytes--;
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	8d 83       	std	Y+5, r24	; 0x05

void EEPROM_voidWriteNBytes(u16 eeprom_Address, u8 *RamAddr, u8 NoOfBytes)
{
	if(NULL != *RamAddr)
	{
		while(NoOfBytes !=  0)
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	88 23       	and	r24, r24
     c6a:	49 f7       	brne	.-46     	; 0xc3e <EEPROM_voidWriteNBytes+0x24>
			eeprom_Address++;
			RamAddr++;
			NoOfBytes--;
		}
	}
}
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <EEPROM_voidReadNBytes>:

void EEPROM_voidReadNBytes(u16 EepromAddr, u8 *RamAddr, u8 NoOfBytes)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	00 d0       	rcall	.+0      	; 0xc82 <EEPROM_voidReadNBytes+0x6>
     c82:	00 d0       	rcall	.+0      	; 0xc84 <EEPROM_voidReadNBytes+0x8>
     c84:	0f 92       	push	r0
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	7c 83       	std	Y+4, r23	; 0x04
     c90:	6b 83       	std	Y+3, r22	; 0x03
     c92:	4d 83       	std	Y+5, r20	; 0x05
	if(NULL != *RamAddr)
     c94:	eb 81       	ldd	r30, Y+3	; 0x03
     c96:	fc 81       	ldd	r31, Y+4	; 0x04
     c98:	80 81       	ld	r24, Z
     c9a:	88 23       	and	r24, r24
     c9c:	b9 f0       	breq	.+46     	; 0xccc <EEPROM_voidReadNBytes+0x50>
     c9e:	13 c0       	rjmp	.+38     	; 0xcc6 <EEPROM_voidReadNBytes+0x4a>
	{
		while(NoOfBytes !=  0)
		{
			*RamAddr = EEPROM_voidReadByte(EepromAddr);
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	0e 94 d0 05 	call	0xba0	; 0xba0 <EEPROM_voidReadByte>
     ca6:	eb 81       	ldd	r30, Y+3	; 0x03
     ca8:	fc 81       	ldd	r31, Y+4	; 0x04
     caa:	80 83       	st	Z, r24
			EepromAddr++;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
			RamAddr++;
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	9c 81       	ldd	r25, Y+4	; 0x04
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	9c 83       	std	Y+4, r25	; 0x04
     cbe:	8b 83       	std	Y+3, r24	; 0x03
			NoOfBytes--;
     cc0:	8d 81       	ldd	r24, Y+5	; 0x05
     cc2:	81 50       	subi	r24, 0x01	; 1
     cc4:	8d 83       	std	Y+5, r24	; 0x05

void EEPROM_voidReadNBytes(u16 EepromAddr, u8 *RamAddr, u8 NoOfBytes)
{
	if(NULL != *RamAddr)
	{
		while(NoOfBytes !=  0)
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	88 23       	and	r24, r24
     cca:	51 f7       	brne	.-44     	; 0xca0 <EEPROM_voidReadNBytes+0x24>
			EepromAddr++;
			RamAddr++;
			NoOfBytes--;
		}
	}
}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <DIO_voidSetPinDir>:
#include "Dio_Interface.h"
#include "Dio_Praivte.h"


void DIO_voidSetPinDir(u8 Group_Type, u8 Pin_No, u8 DirStatus)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	27 97       	sbiw	r28, 0x07	; 7
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	6a 83       	std	Y+2, r22	; 0x02
     cf4:	4b 83       	std	Y+3, r20	; 0x03
	//
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	09 f4       	brne	.+2      	; 0xcfe <DIO_voidSetPinDir+0x22>
     cfc:	f4 c0       	rjmp	.+488    	; 0xee6 <DIO_voidSetPinDir+0x20a>
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	85 30       	cpi	r24, 0x05	; 5
     d02:	08 f0       	brcs	.+2      	; 0xd06 <DIO_voidSetPinDir+0x2a>
     d04:	f0 c0       	rjmp	.+480    	; 0xee6 <DIO_voidSetPinDir+0x20a>
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	88 30       	cpi	r24, 0x08	; 8
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <DIO_voidSetPinDir+0x32>
     d0c:	ec c0       	rjmp	.+472    	; 0xee6 <DIO_voidSetPinDir+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(DirStatus==Input)
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	88 23       	and	r24, r24
     d12:	09 f0       	breq	.+2      	; 0xd16 <DIO_voidSetPinDir+0x3a>
     d14:	75 c0       	rjmp	.+234    	; 0xe00 <DIO_voidSetPinDir+0x124>
		{
			switch(Group_Type)
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	3f 83       	std	Y+7, r19	; 0x07
     d1e:	2e 83       	std	Y+6, r18	; 0x06
     d20:	8e 81       	ldd	r24, Y+6	; 0x06
     d22:	9f 81       	ldd	r25, Y+7	; 0x07
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	91 05       	cpc	r25, r1
     d28:	61 f1       	breq	.+88     	; 0xd82 <DIO_voidSetPinDir+0xa6>
     d2a:	2e 81       	ldd	r18, Y+6	; 0x06
     d2c:	3f 81       	ldd	r19, Y+7	; 0x07
     d2e:	23 30       	cpi	r18, 0x03	; 3
     d30:	31 05       	cpc	r19, r1
     d32:	34 f4       	brge	.+12     	; 0xd40 <DIO_voidSetPinDir+0x64>
     d34:	8e 81       	ldd	r24, Y+6	; 0x06
     d36:	9f 81       	ldd	r25, Y+7	; 0x07
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	91 05       	cpc	r25, r1
     d3c:	69 f0       	breq	.+26     	; 0xd58 <DIO_voidSetPinDir+0x7c>
     d3e:	d3 c0       	rjmp	.+422    	; 0xee6 <DIO_voidSetPinDir+0x20a>
     d40:	2e 81       	ldd	r18, Y+6	; 0x06
     d42:	3f 81       	ldd	r19, Y+7	; 0x07
     d44:	23 30       	cpi	r18, 0x03	; 3
     d46:	31 05       	cpc	r19, r1
     d48:	89 f1       	breq	.+98     	; 0xdac <DIO_voidSetPinDir+0xd0>
     d4a:	8e 81       	ldd	r24, Y+6	; 0x06
     d4c:	9f 81       	ldd	r25, Y+7	; 0x07
     d4e:	84 30       	cpi	r24, 0x04	; 4
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <DIO_voidSetPinDir+0x7a>
     d54:	40 c0       	rjmp	.+128    	; 0xdd6 <DIO_voidSetPinDir+0xfa>
     d56:	c7 c0       	rjmp	.+398    	; 0xee6 <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA&=~(1<<Pin_No);break;
     d58:	aa e3       	ldi	r26, 0x3A	; 58
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	ea e3       	ldi	r30, 0x3A	; 58
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 2e       	mov	r0, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <DIO_voidSetPinDir+0x9a>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <DIO_voidSetPinDir+0x96>
     d7a:	80 95       	com	r24
     d7c:	84 23       	and	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	b2 c0       	rjmp	.+356    	; 0xee6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB&=~(1<<Pin_No);break;
     d82:	a7 e3       	ldi	r26, 0x37	; 55
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e7 e3       	ldi	r30, 0x37	; 55
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_voidSetPinDir+0xc4>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_voidSetPinDir+0xc0>
     da4:	80 95       	com	r24
     da6:	84 23       	and	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	9d c0       	rjmp	.+314    	; 0xee6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC&=~(1<<Pin_No);break;
     dac:	a4 e3       	ldi	r26, 0x34	; 52
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e4 e3       	ldi	r30, 0x34	; 52
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_voidSetPinDir+0xee>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_voidSetPinDir+0xea>
     dce:	80 95       	com	r24
     dd0:	84 23       	and	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	88 c0       	rjmp	.+272    	; 0xee6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD&=~(1<<Pin_No);break;
     dd6:	a1 e3       	ldi	r26, 0x31	; 49
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e1 e3       	ldi	r30, 0x31	; 49
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_voidSetPinDir+0x118>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_voidSetPinDir+0x114>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	73 c0       	rjmp	.+230    	; 0xee6 <DIO_voidSetPinDir+0x20a>
			}
		}
		else if (DirStatus==Output)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	09 f0       	breq	.+2      	; 0xe08 <DIO_voidSetPinDir+0x12c>
     e06:	6f c0       	rjmp	.+222    	; 0xee6 <DIO_voidSetPinDir+0x20a>
		{
			switch(Group_Type)
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	3d 83       	std	Y+5, r19	; 0x05
     e10:	2c 83       	std	Y+4, r18	; 0x04
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	9d 81       	ldd	r25, Y+5	; 0x05
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	91 05       	cpc	r25, r1
     e1a:	51 f1       	breq	.+84     	; 0xe70 <DIO_voidSetPinDir+0x194>
     e1c:	2c 81       	ldd	r18, Y+4	; 0x04
     e1e:	3d 81       	ldd	r19, Y+5	; 0x05
     e20:	23 30       	cpi	r18, 0x03	; 3
     e22:	31 05       	cpc	r19, r1
     e24:	34 f4       	brge	.+12     	; 0xe32 <DIO_voidSetPinDir+0x156>
     e26:	8c 81       	ldd	r24, Y+4	; 0x04
     e28:	9d 81       	ldd	r25, Y+5	; 0x05
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	91 05       	cpc	r25, r1
     e2e:	61 f0       	breq	.+24     	; 0xe48 <DIO_voidSetPinDir+0x16c>
     e30:	5a c0       	rjmp	.+180    	; 0xee6 <DIO_voidSetPinDir+0x20a>
     e32:	2c 81       	ldd	r18, Y+4	; 0x04
     e34:	3d 81       	ldd	r19, Y+5	; 0x05
     e36:	23 30       	cpi	r18, 0x03	; 3
     e38:	31 05       	cpc	r19, r1
     e3a:	71 f1       	breq	.+92     	; 0xe98 <DIO_voidSetPinDir+0x1bc>
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	9d 81       	ldd	r25, Y+5	; 0x05
     e40:	84 30       	cpi	r24, 0x04	; 4
     e42:	91 05       	cpc	r25, r1
     e44:	e9 f1       	breq	.+122    	; 0xec0 <DIO_voidSetPinDir+0x1e4>
     e46:	4f c0       	rjmp	.+158    	; 0xee6 <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA|=(1<<Pin_No);break;
     e48:	aa e3       	ldi	r26, 0x3A	; 58
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ea e3       	ldi	r30, 0x3A	; 58
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_voidSetPinDir+0x18a>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_voidSetPinDir+0x186>
     e6a:	84 2b       	or	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	3b c0       	rjmp	.+118    	; 0xee6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB|=(1<<Pin_No);break;
     e70:	a7 e3       	ldi	r26, 0x37	; 55
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e7 e3       	ldi	r30, 0x37	; 55
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_voidSetPinDir+0x1b2>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_voidSetPinDir+0x1ae>
     e92:	84 2b       	or	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	27 c0       	rjmp	.+78     	; 0xee6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC|=(1<<Pin_No);break;
     e98:	a4 e3       	ldi	r26, 0x34	; 52
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e4 e3       	ldi	r30, 0x34	; 52
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_voidSetPinDir+0x1da>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_voidSetPinDir+0x1d6>
     eba:	84 2b       	or	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	13 c0       	rjmp	.+38     	; 0xee6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD|=(1<<Pin_No);break;
     ec0:	a1 e3       	ldi	r26, 0x31	; 49
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e1 e3       	ldi	r30, 0x31	; 49
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_voidSetPinDir+0x202>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_voidSetPinDir+0x1fe>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
			}
		}
	}


}
     ee6:	27 96       	adiw	r28, 0x07	; 7
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Group_Type, u8 Pin_No, u8 Value)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	27 97       	sbiw	r28, 0x07	; 7
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	6a 83       	std	Y+2, r22	; 0x02
     f10:	4b 83       	std	Y+3, r20	; 0x03
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	88 23       	and	r24, r24
     f16:	09 f4       	brne	.+2      	; 0xf1a <DIO_voidSetPinValue+0x22>
     f18:	f4 c0       	rjmp	.+488    	; 0x1102 <DIO_voidSetPinValue+0x20a>
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	85 30       	cpi	r24, 0x05	; 5
     f1e:	08 f0       	brcs	.+2      	; 0xf22 <DIO_voidSetPinValue+0x2a>
     f20:	f0 c0       	rjmp	.+480    	; 0x1102 <DIO_voidSetPinValue+0x20a>
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	88 30       	cpi	r24, 0x08	; 8
     f26:	08 f0       	brcs	.+2      	; 0xf2a <DIO_voidSetPinValue+0x32>
     f28:	ec c0       	rjmp	.+472    	; 0x1102 <DIO_voidSetPinValue+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(Value==Low)
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	88 23       	and	r24, r24
     f2e:	09 f0       	breq	.+2      	; 0xf32 <DIO_voidSetPinValue+0x3a>
     f30:	75 c0       	rjmp	.+234    	; 0x101c <DIO_voidSetPinValue+0x124>
		{
			switch(Group_Type)
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3f 83       	std	Y+7, r19	; 0x07
     f3a:	2e 83       	std	Y+6, r18	; 0x06
     f3c:	8e 81       	ldd	r24, Y+6	; 0x06
     f3e:	9f 81       	ldd	r25, Y+7	; 0x07
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	91 05       	cpc	r25, r1
     f44:	61 f1       	breq	.+88     	; 0xf9e <DIO_voidSetPinValue+0xa6>
     f46:	2e 81       	ldd	r18, Y+6	; 0x06
     f48:	3f 81       	ldd	r19, Y+7	; 0x07
     f4a:	23 30       	cpi	r18, 0x03	; 3
     f4c:	31 05       	cpc	r19, r1
     f4e:	34 f4       	brge	.+12     	; 0xf5c <DIO_voidSetPinValue+0x64>
     f50:	8e 81       	ldd	r24, Y+6	; 0x06
     f52:	9f 81       	ldd	r25, Y+7	; 0x07
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	69 f0       	breq	.+26     	; 0xf74 <DIO_voidSetPinValue+0x7c>
     f5a:	d3 c0       	rjmp	.+422    	; 0x1102 <DIO_voidSetPinValue+0x20a>
     f5c:	2e 81       	ldd	r18, Y+6	; 0x06
     f5e:	3f 81       	ldd	r19, Y+7	; 0x07
     f60:	23 30       	cpi	r18, 0x03	; 3
     f62:	31 05       	cpc	r19, r1
     f64:	89 f1       	breq	.+98     	; 0xfc8 <DIO_voidSetPinValue+0xd0>
     f66:	8e 81       	ldd	r24, Y+6	; 0x06
     f68:	9f 81       	ldd	r25, Y+7	; 0x07
     f6a:	84 30       	cpi	r24, 0x04	; 4
     f6c:	91 05       	cpc	r25, r1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <DIO_voidSetPinValue+0x7a>
     f70:	40 c0       	rjmp	.+128    	; 0xff2 <DIO_voidSetPinValue+0xfa>
     f72:	c7 c0       	rjmp	.+398    	; 0x1102 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA&=~(1<<Pin_No);break;
     f74:	ab e3       	ldi	r26, 0x3B	; 59
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	eb e3       	ldi	r30, 0x3B	; 59
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_voidSetPinValue+0x9a>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_voidSetPinValue+0x96>
     f96:	80 95       	com	r24
     f98:	84 23       	and	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	b2 c0       	rjmp	.+356    	; 0x1102 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB&=~(1<<Pin_No);break;
     f9e:	a8 e3       	ldi	r26, 0x38	; 56
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e8 e3       	ldi	r30, 0x38	; 56
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_voidSetPinValue+0xc4>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_voidSetPinValue+0xc0>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	9d c0       	rjmp	.+314    	; 0x1102 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC&=~(1<<Pin_No);break;
     fc8:	a5 e3       	ldi	r26, 0x35	; 53
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e3       	ldi	r30, 0x35	; 53
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_voidSetPinValue+0xee>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_voidSetPinValue+0xea>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	88 c0       	rjmp	.+272    	; 0x1102 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD&=~(1<<Pin_No);break;
     ff2:	a2 e3       	ldi	r26, 0x32	; 50
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e2 e3       	ldi	r30, 0x32	; 50
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_voidSetPinValue+0x118>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_voidSetPinValue+0x114>
    1014:	80 95       	com	r24
    1016:	84 23       	and	r24, r20
    1018:	8c 93       	st	X, r24
    101a:	73 c0       	rjmp	.+230    	; 0x1102 <DIO_voidSetPinValue+0x20a>
			}
		}
		else if (Value==High)
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	09 f0       	breq	.+2      	; 0x1024 <DIO_voidSetPinValue+0x12c>
    1022:	6f c0       	rjmp	.+222    	; 0x1102 <DIO_voidSetPinValue+0x20a>
		{
			switch(Group_Type)
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3d 83       	std	Y+5, r19	; 0x05
    102c:	2c 83       	std	Y+4, r18	; 0x04
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	91 05       	cpc	r25, r1
    1036:	51 f1       	breq	.+84     	; 0x108c <DIO_voidSetPinValue+0x194>
    1038:	2c 81       	ldd	r18, Y+4	; 0x04
    103a:	3d 81       	ldd	r19, Y+5	; 0x05
    103c:	23 30       	cpi	r18, 0x03	; 3
    103e:	31 05       	cpc	r19, r1
    1040:	34 f4       	brge	.+12     	; 0x104e <DIO_voidSetPinValue+0x156>
    1042:	8c 81       	ldd	r24, Y+4	; 0x04
    1044:	9d 81       	ldd	r25, Y+5	; 0x05
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	91 05       	cpc	r25, r1
    104a:	61 f0       	breq	.+24     	; 0x1064 <DIO_voidSetPinValue+0x16c>
    104c:	5a c0       	rjmp	.+180    	; 0x1102 <DIO_voidSetPinValue+0x20a>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	23 30       	cpi	r18, 0x03	; 3
    1054:	31 05       	cpc	r19, r1
    1056:	71 f1       	breq	.+92     	; 0x10b4 <DIO_voidSetPinValue+0x1bc>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	84 30       	cpi	r24, 0x04	; 4
    105e:	91 05       	cpc	r25, r1
    1060:	e9 f1       	breq	.+122    	; 0x10dc <DIO_voidSetPinValue+0x1e4>
    1062:	4f c0       	rjmp	.+158    	; 0x1102 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA|=(1<<Pin_No);break;
    1064:	ab e3       	ldi	r26, 0x3B	; 59
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	eb e3       	ldi	r30, 0x3B	; 59
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_voidSetPinValue+0x18a>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_voidSetPinValue+0x186>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	3b c0       	rjmp	.+118    	; 0x1102 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB|=(1<<Pin_No);break;
    108c:	a8 e3       	ldi	r26, 0x38	; 56
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e8 e3       	ldi	r30, 0x38	; 56
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_voidSetPinValue+0x1b2>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_voidSetPinValue+0x1ae>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	27 c0       	rjmp	.+78     	; 0x1102 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC|=(1<<Pin_No);break;
    10b4:	a5 e3       	ldi	r26, 0x35	; 53
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e5 e3       	ldi	r30, 0x35	; 53
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_voidSetPinValue+0x1da>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIO_voidSetPinValue+0x1d6>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	13 c0       	rjmp	.+38     	; 0x1102 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD|=(1<<Pin_No);break;
    10dc:	a2 e3       	ldi	r26, 0x32	; 50
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e2 e3       	ldi	r30, 0x32	; 50
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_voidSetPinValue+0x202>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_voidSetPinValue+0x1fe>
    10fe:	84 2b       	or	r24, r20
    1100:	8c 93       	st	X, r24
			}
		}
	}
}
    1102:	27 96       	adiw	r28, 0x07	; 7
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <DIO_U8ReadPinValue>:
u8 DIO_U8ReadPinValue(u8 Group_Type, u8 Pin_No)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <DIO_U8ReadPinValue+0x6>
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_U8ReadPinValue+0x8>
    111c:	00 d0       	rcall	.+0      	; 0x111e <DIO_U8ReadPinValue+0xa>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	6a 83       	std	Y+2, r22	; 0x02

	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	88 23       	and	r24, r24
    112a:	09 f4       	brne	.+2      	; 0x112e <DIO_U8ReadPinValue+0x1a>
    112c:	74 c0       	rjmp	.+232    	; 0x1216 <DIO_U8ReadPinValue+0x102>
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	85 30       	cpi	r24, 0x05	; 5
    1132:	08 f0       	brcs	.+2      	; 0x1136 <DIO_U8ReadPinValue+0x22>
    1134:	70 c0       	rjmp	.+224    	; 0x1216 <DIO_U8ReadPinValue+0x102>
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	08 f0       	brcs	.+2      	; 0x113e <DIO_U8ReadPinValue+0x2a>
    113c:	6c c0       	rjmp	.+216    	; 0x1216 <DIO_U8ReadPinValue+0x102>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		switch(Group_Type)
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3d 83       	std	Y+5, r19	; 0x05
    1146:	2c 83       	std	Y+4, r18	; 0x04
    1148:	4c 81       	ldd	r20, Y+4	; 0x04
    114a:	5d 81       	ldd	r21, Y+5	; 0x05
    114c:	42 30       	cpi	r20, 0x02	; 2
    114e:	51 05       	cpc	r21, r1
    1150:	49 f1       	breq	.+82     	; 0x11a4 <DIO_U8ReadPinValue+0x90>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	34 f4       	brge	.+12     	; 0x1168 <DIO_U8ReadPinValue+0x54>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	21 30       	cpi	r18, 0x01	; 1
    1162:	31 05       	cpc	r19, r1
    1164:	61 f0       	breq	.+24     	; 0x117e <DIO_U8ReadPinValue+0x6a>
    1166:	57 c0       	rjmp	.+174    	; 0x1216 <DIO_U8ReadPinValue+0x102>
    1168:	4c 81       	ldd	r20, Y+4	; 0x04
    116a:	5d 81       	ldd	r21, Y+5	; 0x05
    116c:	43 30       	cpi	r20, 0x03	; 3
    116e:	51 05       	cpc	r21, r1
    1170:	61 f1       	breq	.+88     	; 0x11ca <DIO_U8ReadPinValue+0xb6>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	84 30       	cpi	r24, 0x04	; 4
    1178:	91 05       	cpc	r25, r1
    117a:	d1 f1       	breq	.+116    	; 0x11f0 <DIO_U8ReadPinValue+0xdc>
    117c:	4c c0       	rjmp	.+152    	; 0x1216 <DIO_U8ReadPinValue+0x102>
		{
		case DIO_GroupA: return((DIO_PINA>>Pin_No)&1);break;
    117e:	e9 e3       	ldi	r30, 0x39	; 57
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	a9 01       	movw	r20, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_U8ReadPinValue+0x82>
    1192:	55 95       	asr	r21
    1194:	47 95       	ror	r20
    1196:	8a 95       	dec	r24
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_U8ReadPinValue+0x7e>
    119a:	ca 01       	movw	r24, r20
    119c:	58 2f       	mov	r21, r24
    119e:	51 70       	andi	r21, 0x01	; 1
    11a0:	5b 83       	std	Y+3, r21	; 0x03
    11a2:	3a c0       	rjmp	.+116    	; 0x1218 <DIO_U8ReadPinValue+0x104>
		case DIO_GroupB: return((DIO_PINB>>Pin_No)&1);break;
    11a4:	e6 e3       	ldi	r30, 0x36	; 54
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	a9 01       	movw	r20, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_U8ReadPinValue+0xa8>
    11b8:	55 95       	asr	r21
    11ba:	47 95       	ror	r20
    11bc:	8a 95       	dec	r24
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_U8ReadPinValue+0xa4>
    11c0:	ca 01       	movw	r24, r20
    11c2:	58 2f       	mov	r21, r24
    11c4:	51 70       	andi	r21, 0x01	; 1
    11c6:	5b 83       	std	Y+3, r21	; 0x03
    11c8:	27 c0       	rjmp	.+78     	; 0x1218 <DIO_U8ReadPinValue+0x104>
		case DIO_GroupC: return((DIO_PINC>>Pin_No)&1);break;
    11ca:	e3 e3       	ldi	r30, 0x33	; 51
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a9 01       	movw	r20, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_U8ReadPinValue+0xce>
    11de:	55 95       	asr	r21
    11e0:	47 95       	ror	r20
    11e2:	8a 95       	dec	r24
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_U8ReadPinValue+0xca>
    11e6:	ca 01       	movw	r24, r20
    11e8:	58 2f       	mov	r21, r24
    11ea:	51 70       	andi	r21, 0x01	; 1
    11ec:	5b 83       	std	Y+3, r21	; 0x03
    11ee:	14 c0       	rjmp	.+40     	; 0x1218 <DIO_U8ReadPinValue+0x104>
		case DIO_GroupD: return((DIO_PIND>>Pin_No)&1);break;
    11f0:	e0 e3       	ldi	r30, 0x30	; 48
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a9 01       	movw	r20, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_U8ReadPinValue+0xf4>
    1204:	55 95       	asr	r21
    1206:	47 95       	ror	r20
    1208:	8a 95       	dec	r24
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_U8ReadPinValue+0xf0>
    120c:	ca 01       	movw	r24, r20
    120e:	58 2f       	mov	r21, r24
    1210:	51 70       	andi	r21, 0x01	; 1
    1212:	5b 83       	std	Y+3, r21	; 0x03
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <DIO_U8ReadPinValue+0x104>
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_U8ReadPinValue+0x108>
		}
	}
}
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	8e 83       	std	Y+6, r24	; 0x06
    121c:	8e 81       	ldd	r24, Y+6	; 0x06
    121e:	26 96       	adiw	r28, 0x06	; 6
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <DIO_voidSetPortDir>:


void DIO_voidSetPortDir(u8 Group_Type , u8 DirStatus)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <DIO_voidSetPortDir+0x6>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DIO_voidSetPortDir+0x8>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	88 23       	and	r24, r24
    1244:	b1 f1       	breq	.+108    	; 0x12b2 <DIO_voidSetPortDir+0x82>
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	85 30       	cpi	r24, 0x05	; 5
    124a:	98 f5       	brcc	.+102    	; 0x12b2 <DIO_voidSetPortDir+0x82>
	{
		switch(Group_Type)
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3c 83       	std	Y+4, r19	; 0x04
    1254:	2b 83       	std	Y+3, r18	; 0x03
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	91 05       	cpc	r25, r1
    125e:	d9 f0       	breq	.+54     	; 0x1296 <DIO_voidSetPortDir+0x66>
    1260:	2b 81       	ldd	r18, Y+3	; 0x03
    1262:	3c 81       	ldd	r19, Y+4	; 0x04
    1264:	23 30       	cpi	r18, 0x03	; 3
    1266:	31 05       	cpc	r19, r1
    1268:	34 f4       	brge	.+12     	; 0x1276 <DIO_voidSetPortDir+0x46>
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	91 05       	cpc	r25, r1
    1272:	61 f0       	breq	.+24     	; 0x128c <DIO_voidSetPortDir+0x5c>
    1274:	1e c0       	rjmp	.+60     	; 0x12b2 <DIO_voidSetPortDir+0x82>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	23 30       	cpi	r18, 0x03	; 3
    127c:	31 05       	cpc	r19, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <DIO_voidSetPortDir+0x70>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	91 05       	cpc	r25, r1
    1288:	81 f0       	breq	.+32     	; 0x12aa <DIO_voidSetPortDir+0x7a>
    128a:	13 c0       	rjmp	.+38     	; 0x12b2 <DIO_voidSetPortDir+0x82>
		{
		case DIO_GroupA:DIO_DDRA=DirStatus;break;
    128c:	ea e3       	ldi	r30, 0x3A	; 58
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
    1294:	0e c0       	rjmp	.+28     	; 0x12b2 <DIO_voidSetPortDir+0x82>
		case DIO_GroupB:DIO_DDRB=DirStatus;break;
    1296:	e7 e3       	ldi	r30, 0x37	; 55
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <DIO_voidSetPortDir+0x82>
		case DIO_GroupC:DIO_DDRC=DirStatus;break;
    12a0:	e4 e3       	ldi	r30, 0x34	; 52
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
    12a8:	04 c0       	rjmp	.+8      	; 0x12b2 <DIO_voidSetPortDir+0x82>
		case DIO_GroupD:DIO_DDRD=DirStatus;break;
    12aa:	e1 e3       	ldi	r30, 0x31	; 49
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	80 83       	st	Z, r24
		}
	}

}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <DIO_voidSetPortValue>:



void DIO_voidSetPortValue(u8 Group_Type , u8 Value)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <DIO_voidSetPortValue+0x6>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <DIO_voidSetPortValue+0x8>
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	88 23       	and	r24, r24
    12d4:	b1 f1       	breq	.+108    	; 0x1342 <DIO_voidSetPortValue+0x82>
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	85 30       	cpi	r24, 0x05	; 5
    12da:	98 f5       	brcc	.+102    	; 0x1342 <DIO_voidSetPortValue+0x82>
	{
		switch(Group_Type)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3c 83       	std	Y+4, r19	; 0x04
    12e4:	2b 83       	std	Y+3, r18	; 0x03
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	91 05       	cpc	r25, r1
    12ee:	d9 f0       	breq	.+54     	; 0x1326 <DIO_voidSetPortValue+0x66>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	23 30       	cpi	r18, 0x03	; 3
    12f6:	31 05       	cpc	r19, r1
    12f8:	34 f4       	brge	.+12     	; 0x1306 <DIO_voidSetPortValue+0x46>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	61 f0       	breq	.+24     	; 0x131c <DIO_voidSetPortValue+0x5c>
    1304:	1e c0       	rjmp	.+60     	; 0x1342 <DIO_voidSetPortValue+0x82>
    1306:	2b 81       	ldd	r18, Y+3	; 0x03
    1308:	3c 81       	ldd	r19, Y+4	; 0x04
    130a:	23 30       	cpi	r18, 0x03	; 3
    130c:	31 05       	cpc	r19, r1
    130e:	81 f0       	breq	.+32     	; 0x1330 <DIO_voidSetPortValue+0x70>
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	91 05       	cpc	r25, r1
    1318:	81 f0       	breq	.+32     	; 0x133a <DIO_voidSetPortValue+0x7a>
    131a:	13 c0       	rjmp	.+38     	; 0x1342 <DIO_voidSetPortValue+0x82>
		{
		case DIO_GroupA:DIO_PORTA=Value;break;
    131c:	eb e3       	ldi	r30, 0x3B	; 59
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	80 83       	st	Z, r24
    1324:	0e c0       	rjmp	.+28     	; 0x1342 <DIO_voidSetPortValue+0x82>
		case DIO_GroupB:DIO_PORTB=Value;break;
    1326:	e8 e3       	ldi	r30, 0x38	; 56
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	80 83       	st	Z, r24
    132e:	09 c0       	rjmp	.+18     	; 0x1342 <DIO_voidSetPortValue+0x82>
		case DIO_GroupC:DIO_PORTC=Value;break;
    1330:	e5 e3       	ldi	r30, 0x35	; 53
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	80 83       	st	Z, r24
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <DIO_voidSetPortValue+0x82>
		case DIO_GroupD:DIO_PORTD=Value;break;
    133a:	e2 e3       	ldi	r30, 0x32	; 50
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	80 83       	st	Z, r24
		}
	}

}
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <DIO_U8ReadPortValue>:


u8 DIO_U8ReadPortValue(u8 Group_Type)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <DIO_U8ReadPortValue+0x6>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <DIO_U8ReadPortValue+0x8>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	89 83       	std	Y+1, r24	; 0x01
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	88 23       	and	r24, r24
    1362:	b9 f1       	breq	.+110    	; 0x13d2 <DIO_U8ReadPortValue+0x82>
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	85 30       	cpi	r24, 0x05	; 5
    1368:	a0 f5       	brcc	.+104    	; 0x13d2 <DIO_U8ReadPortValue+0x82>
	{
	switch(Group_Type)
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	3c 83       	std	Y+4, r19	; 0x04
    1372:	2b 83       	std	Y+3, r18	; 0x03
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	91 05       	cpc	r25, r1
    137c:	d9 f0       	breq	.+54     	; 0x13b4 <DIO_U8ReadPortValue+0x64>
    137e:	2b 81       	ldd	r18, Y+3	; 0x03
    1380:	3c 81       	ldd	r19, Y+4	; 0x04
    1382:	23 30       	cpi	r18, 0x03	; 3
    1384:	31 05       	cpc	r19, r1
    1386:	34 f4       	brge	.+12     	; 0x1394 <DIO_U8ReadPortValue+0x44>
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	61 f0       	breq	.+24     	; 0x13aa <DIO_U8ReadPortValue+0x5a>
    1392:	1f c0       	rjmp	.+62     	; 0x13d2 <DIO_U8ReadPortValue+0x82>
    1394:	2b 81       	ldd	r18, Y+3	; 0x03
    1396:	3c 81       	ldd	r19, Y+4	; 0x04
    1398:	23 30       	cpi	r18, 0x03	; 3
    139a:	31 05       	cpc	r19, r1
    139c:	81 f0       	breq	.+32     	; 0x13be <DIO_U8ReadPortValue+0x6e>
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	84 30       	cpi	r24, 0x04	; 4
    13a4:	91 05       	cpc	r25, r1
    13a6:	81 f0       	breq	.+32     	; 0x13c8 <DIO_U8ReadPortValue+0x78>
    13a8:	14 c0       	rjmp	.+40     	; 0x13d2 <DIO_U8ReadPortValue+0x82>
		{
		case DIO_GroupA:return (DIO_PINA);break;
    13aa:	e9 e3       	ldi	r30, 0x39	; 57
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	90 81       	ld	r25, Z
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	11 c0       	rjmp	.+34     	; 0x13d6 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupB:return (DIO_PINB);break;
    13b4:	e6 e3       	ldi	r30, 0x36	; 54
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	20 81       	ld	r18, Z
    13ba:	2a 83       	std	Y+2, r18	; 0x02
    13bc:	0c c0       	rjmp	.+24     	; 0x13d6 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupC:return (DIO_PINC);break;
    13be:	e3 e3       	ldi	r30, 0x33	; 51
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	30 81       	ld	r19, Z
    13c4:	3a 83       	std	Y+2, r19	; 0x02
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupD:return (DIO_PIND);break;
    13c8:	e0 e3       	ldi	r30, 0x30	; 48
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8a 83       	std	Y+2, r24	; 0x02
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_U8ReadPortValue+0x86>
		}
	}
	return -1;
    13d2:	9f ef       	ldi	r25, 0xFF	; 255
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02

}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <DIO_voidcontrolPullupPin>:


void DIO_voidcontrolPullupPin(u8 Group_type , u8 Pin_No , u8 Pullup_Status )
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	27 97       	sbiw	r28, 0x07	; 7
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	6a 83       	std	Y+2, r22	; 0x02
    13fe:	4b 83       	std	Y+3, r20	; 0x03

	if ((Group_type >= DIO_GroupA && Group_type <= DIO_GroupD)
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	88 23       	and	r24, r24
    1404:	09 f4       	brne	.+2      	; 0x1408 <DIO_voidcontrolPullupPin+0x22>
    1406:	f4 c0       	rjmp	.+488    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	85 30       	cpi	r24, 0x05	; 5
    140c:	08 f0       	brcs	.+2      	; 0x1410 <DIO_voidcontrolPullupPin+0x2a>
    140e:	f0 c0       	rjmp	.+480    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	88 30       	cpi	r24, 0x08	; 8
    1414:	08 f0       	brcs	.+2      	; 0x1418 <DIO_voidcontrolPullupPin+0x32>
    1416:	ec c0       	rjmp	.+472    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
			&& (Pin_No >= DIO_Pin0 && Pin_No <= DIO_Pin7) )
	{
		if(Pullup_Status==Clr_PullUp)
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	88 23       	and	r24, r24
    141c:	09 f0       	breq	.+2      	; 0x1420 <DIO_voidcontrolPullupPin+0x3a>
    141e:	75 c0       	rjmp	.+234    	; 0x150a <DIO_voidcontrolPullupPin+0x124>
		{
			switch(Group_type)
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	3f 83       	std	Y+7, r19	; 0x07
    1428:	2e 83       	std	Y+6, r18	; 0x06
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	61 f1       	breq	.+88     	; 0x148c <DIO_voidcontrolPullupPin+0xa6>
    1434:	2e 81       	ldd	r18, Y+6	; 0x06
    1436:	3f 81       	ldd	r19, Y+7	; 0x07
    1438:	23 30       	cpi	r18, 0x03	; 3
    143a:	31 05       	cpc	r19, r1
    143c:	34 f4       	brge	.+12     	; 0x144a <DIO_voidcontrolPullupPin+0x64>
    143e:	8e 81       	ldd	r24, Y+6	; 0x06
    1440:	9f 81       	ldd	r25, Y+7	; 0x07
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	91 05       	cpc	r25, r1
    1446:	69 f0       	breq	.+26     	; 0x1462 <DIO_voidcontrolPullupPin+0x7c>
    1448:	d3 c0       	rjmp	.+422    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
    144a:	2e 81       	ldd	r18, Y+6	; 0x06
    144c:	3f 81       	ldd	r19, Y+7	; 0x07
    144e:	23 30       	cpi	r18, 0x03	; 3
    1450:	31 05       	cpc	r19, r1
    1452:	89 f1       	breq	.+98     	; 0x14b6 <DIO_voidcontrolPullupPin+0xd0>
    1454:	8e 81       	ldd	r24, Y+6	; 0x06
    1456:	9f 81       	ldd	r25, Y+7	; 0x07
    1458:	84 30       	cpi	r24, 0x04	; 4
    145a:	91 05       	cpc	r25, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <DIO_voidcontrolPullupPin+0x7a>
    145e:	40 c0       	rjmp	.+128    	; 0x14e0 <DIO_voidcontrolPullupPin+0xfa>
    1460:	c7 c0       	rjmp	.+398    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
			{
			case DIO_GroupA : clr_bit(DIO_DDRA,Pin_No); break ;
    1462:	aa e3       	ldi	r26, 0x3A	; 58
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	ea e3       	ldi	r30, 0x3A	; 58
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_voidcontrolPullupPin+0x9a>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_voidcontrolPullupPin+0x96>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	b2 c0       	rjmp	.+356    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
			case DIO_GroupB : clr_bit(DIO_DDRB,Pin_No); break ;
    148c:	a7 e3       	ldi	r26, 0x37	; 55
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e7 e3       	ldi	r30, 0x37	; 55
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_voidcontrolPullupPin+0xc4>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_voidcontrolPullupPin+0xc0>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	9d c0       	rjmp	.+314    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
			case DIO_GroupC : clr_bit(DIO_DDRC,Pin_No); break ;
    14b6:	a4 e3       	ldi	r26, 0x34	; 52
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e4 e3       	ldi	r30, 0x34	; 52
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_voidcontrolPullupPin+0xee>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_voidcontrolPullupPin+0xea>
    14d8:	80 95       	com	r24
    14da:	84 23       	and	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	88 c0       	rjmp	.+272    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
			case DIO_GroupD : clr_bit(DIO_DDRD,Pin_No); break ;
    14e0:	a1 e3       	ldi	r26, 0x31	; 49
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e1 e3       	ldi	r30, 0x31	; 49
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_voidcontrolPullupPin+0x118>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_voidcontrolPullupPin+0x114>
    1502:	80 95       	com	r24
    1504:	84 23       	and	r24, r20
    1506:	8c 93       	st	X, r24
    1508:	73 c0       	rjmp	.+230    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
			default: /* Wrong Port ID */       break;
			}
		}
		else if(Pullup_Status==Set_PullUp)
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	09 f0       	breq	.+2      	; 0x1512 <DIO_voidcontrolPullupPin+0x12c>
    1510:	6f c0       	rjmp	.+222    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
		{
			switch(Group_type)
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3d 83       	std	Y+5, r19	; 0x05
    151a:	2c 83       	std	Y+4, r18	; 0x04
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	91 05       	cpc	r25, r1
    1524:	51 f1       	breq	.+84     	; 0x157a <DIO_voidcontrolPullupPin+0x194>
    1526:	2c 81       	ldd	r18, Y+4	; 0x04
    1528:	3d 81       	ldd	r19, Y+5	; 0x05
    152a:	23 30       	cpi	r18, 0x03	; 3
    152c:	31 05       	cpc	r19, r1
    152e:	34 f4       	brge	.+12     	; 0x153c <DIO_voidcontrolPullupPin+0x156>
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9d 81       	ldd	r25, Y+5	; 0x05
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	61 f0       	breq	.+24     	; 0x1552 <DIO_voidcontrolPullupPin+0x16c>
    153a:	5a c0       	rjmp	.+180    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
    153c:	2c 81       	ldd	r18, Y+4	; 0x04
    153e:	3d 81       	ldd	r19, Y+5	; 0x05
    1540:	23 30       	cpi	r18, 0x03	; 3
    1542:	31 05       	cpc	r19, r1
    1544:	71 f1       	breq	.+92     	; 0x15a2 <DIO_voidcontrolPullupPin+0x1bc>
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	91 05       	cpc	r25, r1
    154e:	e9 f1       	breq	.+122    	; 0x15ca <DIO_voidcontrolPullupPin+0x1e4>
    1550:	4f c0       	rjmp	.+158    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
			{
			case DIO_GroupA : set_bit(DIO_DDRA,Pin_No); break ;
    1552:	aa e3       	ldi	r26, 0x3A	; 58
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ea e3       	ldi	r30, 0x3A	; 58
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_voidcontrolPullupPin+0x18a>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_voidcontrolPullupPin+0x186>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	3b c0       	rjmp	.+118    	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
			case DIO_GroupB : set_bit(DIO_DDRB,Pin_No); break ;
    157a:	a7 e3       	ldi	r26, 0x37	; 55
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e7 e3       	ldi	r30, 0x37	; 55
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_voidcontrolPullupPin+0x1b2>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_voidcontrolPullupPin+0x1ae>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	27 c0       	rjmp	.+78     	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
			case DIO_GroupC : set_bit(DIO_DDRC,Pin_No); break ;
    15a2:	a4 e3       	ldi	r26, 0x34	; 52
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e4 e3       	ldi	r30, 0x34	; 52
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_voidcontrolPullupPin+0x1da>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_voidcontrolPullupPin+0x1d6>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <DIO_voidcontrolPullupPin+0x20a>
			case DIO_GroupD : set_bit(DIO_DDRD,Pin_No); break ;
    15ca:	a1 e3       	ldi	r26, 0x31	; 49
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e1 e3       	ldi	r30, 0x31	; 49
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_voidcontrolPullupPin+0x202>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_voidcontrolPullupPin+0x1fe>
    15ec:	84 2b       	or	r24, r20
    15ee:	8c 93       	st	X, r24
			default: /* Wrong Port ID */       break;
	        }
	}
}
}
    15f0:	27 96       	adiw	r28, 0x07	; 7
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DIO_voidcontrolPullupPort>:




void DIO_voidcontrolPullupPort(u8 Group_type , u8 Pullup_Status )
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <DIO_voidcontrolPullupPort+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <DIO_voidcontrolPullupPort+0x8>
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	6a 83       	std	Y+2, r22	; 0x02
	if ((Group_type >= DIO_GroupA && Group_type <= DIO_GroupD))
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	88 23       	and	r24, r24
    1616:	c9 f1       	breq	.+114    	; 0x168a <DIO_voidcontrolPullupPort+0x88>
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	85 30       	cpi	r24, 0x05	; 5
    161c:	b0 f5       	brcc	.+108    	; 0x168a <DIO_voidcontrolPullupPort+0x88>
	{
		if(Pullup_Status==Clr_PullUp)
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	88 23       	and	r24, r24
    1622:	99 f5       	brne	.+102    	; 0x168a <DIO_voidcontrolPullupPort+0x88>
		{
			switch(Group_type)
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	3c 83       	std	Y+4, r19	; 0x04
    162c:	2b 83       	std	Y+3, r18	; 0x03
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	91 05       	cpc	r25, r1
    1636:	d9 f0       	breq	.+54     	; 0x166e <DIO_voidcontrolPullupPort+0x6c>
    1638:	2b 81       	ldd	r18, Y+3	; 0x03
    163a:	3c 81       	ldd	r19, Y+4	; 0x04
    163c:	23 30       	cpi	r18, 0x03	; 3
    163e:	31 05       	cpc	r19, r1
    1640:	34 f4       	brge	.+12     	; 0x164e <DIO_voidcontrolPullupPort+0x4c>
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	91 05       	cpc	r25, r1
    164a:	61 f0       	breq	.+24     	; 0x1664 <DIO_voidcontrolPullupPort+0x62>
    164c:	1e c0       	rjmp	.+60     	; 0x168a <DIO_voidcontrolPullupPort+0x88>
    164e:	2b 81       	ldd	r18, Y+3	; 0x03
    1650:	3c 81       	ldd	r19, Y+4	; 0x04
    1652:	23 30       	cpi	r18, 0x03	; 3
    1654:	31 05       	cpc	r19, r1
    1656:	81 f0       	breq	.+32     	; 0x1678 <DIO_voidcontrolPullupPort+0x76>
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	91 05       	cpc	r25, r1
    1660:	81 f0       	breq	.+32     	; 0x1682 <DIO_voidcontrolPullupPort+0x80>
    1662:	13 c0       	rjmp	.+38     	; 0x168a <DIO_voidcontrolPullupPort+0x88>
				{
				case DIO_GroupA : DIO_DDRA = Pullup_Status ; break ;
    1664:	ea e3       	ldi	r30, 0x3A	; 58
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	80 83       	st	Z, r24
    166c:	0e c0       	rjmp	.+28     	; 0x168a <DIO_voidcontrolPullupPort+0x88>
				case DIO_GroupB : DIO_DDRB = Pullup_Status ; break ;
    166e:	e7 e3       	ldi	r30, 0x37	; 55
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	80 83       	st	Z, r24
    1676:	09 c0       	rjmp	.+18     	; 0x168a <DIO_voidcontrolPullupPort+0x88>
				case DIO_GroupC : DIO_DDRC = Pullup_Status ; break ;
    1678:	e4 e3       	ldi	r30, 0x34	; 52
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	80 83       	st	Z, r24
    1680:	04 c0       	rjmp	.+8      	; 0x168a <DIO_voidcontrolPullupPort+0x88>
				case DIO_GroupD : DIO_DDRD = Pullup_Status ; break ;
    1682:	e1 e3       	ldi	r30, 0x31	; 49
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	80 83       	st	Z, r24
				default: /* Wrong Port ID */       break;
				}
		}

}
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <Void_Led_Pin>:

#include "Led_Interface.h"
#include "Led_Config.h"

void Void_Led_Pin( u8 Led_status )
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	89 83       	std	Y+1, r24	; 0x01
		if (Led_status == Led_On)
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	59 f4       	brne	.+22     	; 0x16c0 <Void_Led_Pin+0x28>
		{
		DIO_voidSetPinDir(Group_type , Pin_No , Output);
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_voidSetPinDir>
		DIO_voidSetPinValue(Group_type , Pin_No , Led_On);
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
    16be:	0d c0       	rjmp	.+26     	; 0x16da <Void_Led_Pin+0x42>
		}
		else if (Led_status == Led_Off)
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	88 23       	and	r24, r24
    16c4:	51 f4       	brne	.+20     	; 0x16da <Void_Led_Pin+0x42>
		{
			DIO_voidSetPinDir(Group_type , Pin_No , Output);
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_voidSetPinDir>
		    DIO_voidSetPinValue(Group_type , Pin_No , Led_Off);
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	40 e0       	ldi	r20, 0x00	; 0
    16d6:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
		}
}
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <Lcd_voidSendCommand>:
#include "Lcd_Private.h"
#include "Lcd_config.h"


void Lcd_voidSendCommand(u8 command)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	0f 92       	push	r0
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	89 83       	std	Y+1, r24	; 0x01
//set the RS value as Low (command =>RS =  0 )
	DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,Low);
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
//set the RW vlaue as Low (Write  => RW = 0 )
	DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
//set the E Value as High (High CLK)
	DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    1702:	82 e0       	ldi	r24, 0x02	; 2
    1704:	62 e0       	ldi	r22, 0x02	; 2
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
//Send Command
	DIO_voidSetPortValue(Lcd_DCGroup,command);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	69 81       	ldd	r22, Y+1	; 0x01
    1710:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPortValue>
//Set the E value as Low (Low CLK)
	DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	62 e0       	ldi	r22, 0x02	; 2
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>

}
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <Lcd_voidSendData>:

void Lcd_voidSendData(u8 data)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	0f 92       	push	r0
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	89 83       	std	Y+1, r24	; 0x01
//set the RS value as Low (Data =>RS =  1 )
	DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,High);
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
//set the RW vlaue as Low (Write  => RW = 0 )
	DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
//set the E Value as High (High CLK)
	DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	62 e0       	ldi	r22, 0x02	; 2
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
//Send Data
	DIO_voidSetPortValue(Lcd_DCGroup,data);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	69 81       	ldd	r22, Y+1	; 0x01
    1754:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_voidSetPortValue>
//Set the E value as Low (Low CLK)
	DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	62 e0       	ldi	r22, 0x02	; 2
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>

}
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <Lcd_voidInit>:


void Lcd_voidInit()
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	e8 97       	sbiw	r28, 0x38	; 56
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
	//set Direction
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RsPin,Output);
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	41 e0       	ldi	r20, 0x01	; 1
    1784:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RwPin,Output);
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_EPin,Output);
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	62 e0       	ldi	r22, 0x02	; 2
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_voidSetPinDir>
	DIO_voidSetPortDir(Lcd_DCGroup,0xff);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	6f ef       	ldi	r22, 0xFF	; 255
    17a0:	0e 94 18 09 	call	0x1230	; 0x1230 <DIO_voidSetPortDir>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	ac e0       	ldi	r26, 0x0C	; 12
    17aa:	b2 e4       	ldi	r27, 0x42	; 66
    17ac:	8d ab       	std	Y+53, r24	; 0x35
    17ae:	9e ab       	std	Y+54, r25	; 0x36
    17b0:	af ab       	std	Y+55, r26	; 0x37
    17b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6d a9       	ldd	r22, Y+53	; 0x35
    17b6:	7e a9       	ldd	r23, Y+54	; 0x36
    17b8:	8f a9       	ldd	r24, Y+55	; 0x37
    17ba:	98 ad       	ldd	r25, Y+56	; 0x38
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a ef       	ldi	r20, 0xFA	; 250
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	89 ab       	std	Y+49, r24	; 0x31
    17ce:	9a ab       	std	Y+50, r25	; 0x32
    17d0:	ab ab       	std	Y+51, r26	; 0x33
    17d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17d4:	69 a9       	ldd	r22, Y+49	; 0x31
    17d6:	7a a9       	ldd	r23, Y+50	; 0x32
    17d8:	8b a9       	ldd	r24, Y+51	; 0x33
    17da:	9c a9       	ldd	r25, Y+52	; 0x34
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <Lcd_voidInit+0x8c>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	98 ab       	std	Y+48, r25	; 0x30
    17f2:	8f a7       	std	Y+47, r24	; 0x2f
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <Lcd_voidInit+0x10a>
	else if (__tmp > 65535)
    17f6:	69 a9       	ldd	r22, Y+49	; 0x31
    17f8:	7a a9       	ldd	r23, Y+50	; 0x32
    17fa:	8b a9       	ldd	r24, Y+51	; 0x33
    17fc:	9c a9       	ldd	r25, Y+52	; 0x34
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <Lcd_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6d a9       	ldd	r22, Y+53	; 0x35
    1810:	7e a9       	ldd	r23, Y+54	; 0x36
    1812:	8f a9       	ldd	r24, Y+55	; 0x37
    1814:	98 ad       	ldd	r25, Y+56	; 0x38
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	98 ab       	std	Y+48, r25	; 0x30
    1834:	8f a7       	std	Y+47, r24	; 0x2f
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <Lcd_voidInit+0xec>
    1838:	88 ec       	ldi	r24, 0xC8	; 200
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9e a7       	std	Y+46, r25	; 0x2e
    183e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1840:	8d a5       	ldd	r24, Y+45	; 0x2d
    1842:	9e a5       	ldd	r25, Y+46	; 0x2e
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <Lcd_voidInit+0xda>
    1848:	9e a7       	std	Y+46, r25	; 0x2e
    184a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	8f a5       	ldd	r24, Y+47	; 0x2f
    184e:	98 a9       	ldd	r25, Y+48	; 0x30
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	98 ab       	std	Y+48, r25	; 0x30
    1854:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	8f a5       	ldd	r24, Y+47	; 0x2f
    1858:	98 a9       	ldd	r25, Y+48	; 0x30
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <Lcd_voidInit+0xce>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <Lcd_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	69 a9       	ldd	r22, Y+49	; 0x31
    1862:	7a a9       	ldd	r23, Y+50	; 0x32
    1864:	8b a9       	ldd	r24, Y+51	; 0x33
    1866:	9c a9       	ldd	r25, Y+52	; 0x34
    1868:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	98 ab       	std	Y+48, r25	; 0x30
    1872:	8f a7       	std	Y+47, r24	; 0x2f
    1874:	8f a5       	ldd	r24, Y+47	; 0x2f
    1876:	98 a9       	ldd	r25, Y+48	; 0x30
    1878:	9c a7       	std	Y+44, r25	; 0x2c
    187a:	8b a7       	std	Y+43, r24	; 0x2b
    187c:	8b a5       	ldd	r24, Y+43	; 0x2b
    187e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <Lcd_voidInit+0x116>
    1884:	9c a7       	std	Y+44, r25	; 0x2c
    1886:	8b a7       	std	Y+43, r24	; 0x2b
	//wait for 30ms
	_delay_ms(35);
	//sent the Function set
	Lcd_voidSendCommand(LCD_Set8Bit2Line5x8);
    1888:	88 e3       	ldi	r24, 0x38	; 56
    188a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <Lcd_voidSendCommand>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 e8       	ldi	r26, 0x80	; 128
    1894:	bf e3       	ldi	r27, 0x3F	; 63
    1896:	8f a3       	std	Y+39, r24	; 0x27
    1898:	98 a7       	std	Y+40, r25	; 0x28
    189a:	a9 a7       	std	Y+41, r26	; 0x29
    189c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189e:	6f a1       	ldd	r22, Y+39	; 0x27
    18a0:	78 a5       	ldd	r23, Y+40	; 0x28
    18a2:	89 a5       	ldd	r24, Y+41	; 0x29
    18a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	4a ef       	ldi	r20, 0xFA	; 250
    18ac:	54 e4       	ldi	r21, 0x44	; 68
    18ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	8b a3       	std	Y+35, r24	; 0x23
    18b8:	9c a3       	std	Y+36, r25	; 0x24
    18ba:	ad a3       	std	Y+37, r26	; 0x25
    18bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18be:	6b a1       	ldd	r22, Y+35	; 0x23
    18c0:	7c a1       	ldd	r23, Y+36	; 0x24
    18c2:	8d a1       	ldd	r24, Y+37	; 0x25
    18c4:	9e a1       	ldd	r25, Y+38	; 0x26
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e8       	ldi	r20, 0x80	; 128
    18cc:	5f e3       	ldi	r21, 0x3F	; 63
    18ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18d2:	88 23       	and	r24, r24
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <Lcd_voidInit+0x176>
		__ticks = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9a a3       	std	Y+34, r25	; 0x22
    18dc:	89 a3       	std	Y+33, r24	; 0x21
    18de:	3f c0       	rjmp	.+126    	; 0x195e <Lcd_voidInit+0x1f4>
	else if (__tmp > 65535)
    18e0:	6b a1       	ldd	r22, Y+35	; 0x23
    18e2:	7c a1       	ldd	r23, Y+36	; 0x24
    18e4:	8d a1       	ldd	r24, Y+37	; 0x25
    18e6:	9e a1       	ldd	r25, Y+38	; 0x26
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	4c f5       	brge	.+82     	; 0x194a <Lcd_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	6f a1       	ldd	r22, Y+39	; 0x27
    18fa:	78 a5       	ldd	r23, Y+40	; 0x28
    18fc:	89 a5       	ldd	r24, Y+41	; 0x29
    18fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9a a3       	std	Y+34, r25	; 0x22
    191e:	89 a3       	std	Y+33, r24	; 0x21
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <Lcd_voidInit+0x1d6>
    1922:	88 ec       	ldi	r24, 0xC8	; 200
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	98 a3       	std	Y+32, r25	; 0x20
    1928:	8f 8f       	std	Y+31, r24	; 0x1f
    192a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    192c:	98 a1       	ldd	r25, Y+32	; 0x20
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <Lcd_voidInit+0x1c4>
    1932:	98 a3       	std	Y+32, r25	; 0x20
    1934:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	89 a1       	ldd	r24, Y+33	; 0x21
    1938:	9a a1       	ldd	r25, Y+34	; 0x22
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	9a a3       	std	Y+34, r25	; 0x22
    193e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1940:	89 a1       	ldd	r24, Y+33	; 0x21
    1942:	9a a1       	ldd	r25, Y+34	; 0x22
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f7       	brne	.-38     	; 0x1922 <Lcd_voidInit+0x1b8>
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <Lcd_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194a:	6b a1       	ldd	r22, Y+35	; 0x23
    194c:	7c a1       	ldd	r23, Y+36	; 0x24
    194e:	8d a1       	ldd	r24, Y+37	; 0x25
    1950:	9e a1       	ldd	r25, Y+38	; 0x26
    1952:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9a a3       	std	Y+34, r25	; 0x22
    195c:	89 a3       	std	Y+33, r24	; 0x21
    195e:	89 a1       	ldd	r24, Y+33	; 0x21
    1960:	9a a1       	ldd	r25, Y+34	; 0x22
    1962:	9e 8f       	std	Y+30, r25	; 0x1e
    1964:	8d 8f       	std	Y+29, r24	; 0x1d
    1966:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1968:	9e 8d       	ldd	r25, Y+30	; 0x1e
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <Lcd_voidInit+0x200>
    196e:	9e 8f       	std	Y+30, r25	; 0x1e
    1970:	8d 8f       	std	Y+29, r24	; 0x1d
	//wait for 39us
	_delay_ms(1);
	//sent the display
	Lcd_voidSendCommand(LCD_CursorBlinkON);
    1972:	8f e0       	ldi	r24, 0x0F	; 15
    1974:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <Lcd_voidSendCommand>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a0 e8       	ldi	r26, 0x80	; 128
    197e:	bf e3       	ldi	r27, 0x3F	; 63
    1980:	89 8f       	std	Y+25, r24	; 0x19
    1982:	9a 8f       	std	Y+26, r25	; 0x1a
    1984:	ab 8f       	std	Y+27, r26	; 0x1b
    1986:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1988:	69 8d       	ldd	r22, Y+25	; 0x19
    198a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    198c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a ef       	ldi	r20, 0xFA	; 250
    1996:	54 e4       	ldi	r21, 0x44	; 68
    1998:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8d 8b       	std	Y+21, r24	; 0x15
    19a2:	9e 8b       	std	Y+22, r25	; 0x16
    19a4:	af 8b       	std	Y+23, r26	; 0x17
    19a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19a8:	6d 89       	ldd	r22, Y+21	; 0x15
    19aa:	7e 89       	ldd	r23, Y+22	; 0x16
    19ac:	8f 89       	ldd	r24, Y+23	; 0x17
    19ae:	98 8d       	ldd	r25, Y+24	; 0x18
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <Lcd_voidInit+0x260>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9c 8b       	std	Y+20, r25	; 0x14
    19c6:	8b 8b       	std	Y+19, r24	; 0x13
    19c8:	3f c0       	rjmp	.+126    	; 0x1a48 <Lcd_voidInit+0x2de>
	else if (__tmp > 65535)
    19ca:	6d 89       	ldd	r22, Y+21	; 0x15
    19cc:	7e 89       	ldd	r23, Y+22	; 0x16
    19ce:	8f 89       	ldd	r24, Y+23	; 0x17
    19d0:	98 8d       	ldd	r25, Y+24	; 0x18
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	4c f5       	brge	.+82     	; 0x1a34 <Lcd_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	69 8d       	ldd	r22, Y+25	; 0x19
    19e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9c 8b       	std	Y+20, r25	; 0x14
    1a08:	8b 8b       	std	Y+19, r24	; 0x13
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <Lcd_voidInit+0x2c0>
    1a0c:	88 ec       	ldi	r24, 0xC8	; 200
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9a 8b       	std	Y+18, r25	; 0x12
    1a12:	89 8b       	std	Y+17, r24	; 0x11
    1a14:	89 89       	ldd	r24, Y+17	; 0x11
    1a16:	9a 89       	ldd	r25, Y+18	; 0x12
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <Lcd_voidInit+0x2ae>
    1a1c:	9a 8b       	std	Y+18, r25	; 0x12
    1a1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	8b 89       	ldd	r24, Y+19	; 0x13
    1a22:	9c 89       	ldd	r25, Y+20	; 0x14
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9c 8b       	std	Y+20, r25	; 0x14
    1a28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <Lcd_voidInit+0x2a2>
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <Lcd_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	6d 89       	ldd	r22, Y+21	; 0x15
    1a36:	7e 89       	ldd	r23, Y+22	; 0x16
    1a38:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9c 8b       	std	Y+20, r25	; 0x14
    1a46:	8b 8b       	std	Y+19, r24	; 0x13
    1a48:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4c:	98 8b       	std	Y+16, r25	; 0x10
    1a4e:	8f 87       	std	Y+15, r24	; 0x0f
    1a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a52:	98 89       	ldd	r25, Y+16	; 0x10
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <Lcd_voidInit+0x2ea>
    1a58:	98 8b       	std	Y+16, r25	; 0x10
    1a5a:	8f 87       	std	Y+15, r24	; 0x0f
	//wait for 39us
	_delay_ms(1);
	//sent the Clear
	Lcd_voidSendCommand(LCD_ClearDisplay);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <Lcd_voidSendCommand>
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 e0       	ldi	r26, 0x00	; 0
    1a68:	b0 e4       	ldi	r27, 0x40	; 64
    1a6a:	8b 87       	std	Y+11, r24	; 0x0b
    1a6c:	9c 87       	std	Y+12, r25	; 0x0c
    1a6e:	ad 87       	std	Y+13, r26	; 0x0d
    1a70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a ef       	ldi	r20, 0xFA	; 250
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	8f 83       	std	Y+7, r24	; 0x07
    1a8c:	98 87       	std	Y+8, r25	; 0x08
    1a8e:	a9 87       	std	Y+9, r26	; 0x09
    1a90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a92:	6f 81       	ldd	r22, Y+7	; 0x07
    1a94:	78 85       	ldd	r23, Y+8	; 0x08
    1a96:	89 85       	ldd	r24, Y+9	; 0x09
    1a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <Lcd_voidInit+0x34a>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9e 83       	std	Y+6, r25	; 0x06
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <Lcd_voidInit+0x3c8>
	else if (__tmp > 65535)
    1ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab6:	78 85       	ldd	r23, Y+8	; 0x08
    1ab8:	89 85       	ldd	r24, Y+9	; 0x09
    1aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	57 e4       	ldi	r21, 0x47	; 71
    1ac4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	4c f5       	brge	.+82     	; 0x1b1e <Lcd_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <Lcd_voidInit+0x3aa>
    1af6:	88 ec       	ldi	r24, 0xC8	; 200
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9c 83       	std	Y+4, r25	; 0x04
    1afc:	8b 83       	std	Y+3, r24	; 0x03
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <Lcd_voidInit+0x398>
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <Lcd_voidInit+0x38c>
    1b1c:	14 c0       	rjmp	.+40     	; 0x1b46 <Lcd_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <Lcd_voidInit+0x3d4>
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
	//sent the EntryMode
	Lcd_voidSendCommand(LCD_EntryMode2);
    1b46:	86 e0       	ldi	r24, 0x06	; 6
    1b48:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <Lcd_voidSendCommand>

}
    1b4c:	e8 96       	adiw	r28, 0x38	; 56
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <Lcd_voidSendWord>:


void Lcd_voidSendWord(u8 *String)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <Lcd_voidSendWord+0x6>
    1b64:	0f 92       	push	r0
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	9b 83       	std	Y+3, r25	; 0x03
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    1b6e:	19 82       	std	Y+1, r1	; 0x01
    1b70:	0e c0       	rjmp	.+28     	; 0x1b8e <Lcd_voidSendWord+0x30>
	while(String[i]!='\0')
	{
		Lcd_voidSendData(String[i]);
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	e2 0f       	add	r30, r18
    1b80:	f3 1f       	adc	r31, r19
    1b82:	80 81       	ld	r24, Z
    1b84:	0e 94 93 0b 	call	0x1726	; 0x1726 <Lcd_voidSendData>
		i++;
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	8f 5f       	subi	r24, 0xFF	; 255
    1b8c:	89 83       	std	Y+1, r24	; 0x01


void Lcd_voidSendWord(u8 *String)
{
	u8 i = 0 ;
	while(String[i]!='\0')
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	9b 81       	ldd	r25, Y+3	; 0x03
    1b98:	fc 01       	movw	r30, r24
    1b9a:	e2 0f       	add	r30, r18
    1b9c:	f3 1f       	adc	r31, r19
    1b9e:	80 81       	ld	r24, Z
    1ba0:	88 23       	and	r24, r24
    1ba2:	39 f7       	brne	.-50     	; 0x1b72 <Lcd_voidSendWord+0x14>
	{
		Lcd_voidSendData(String[i]);
		i++;
	}
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <Lcd_voidGoXY>:

void Lcd_voidGoXY(u8 XPos,u8 YPos)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <Lcd_voidGoXY+0x6>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <Lcd_voidGoXY+0x8>
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
    1bc0:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_Add;
	switch(XPos)
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	3d 83       	std	Y+5, r19	; 0x05
    1bca:	2c 83       	std	Y+4, r18	; 0x04
    1bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bce:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	31 f0       	breq	.+12     	; 0x1be0 <Lcd_voidGoXY+0x30>
    1bd4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd8:	21 30       	cpi	r18, 0x01	; 1
    1bda:	31 05       	cpc	r19, r1
    1bdc:	19 f0       	breq	.+6      	; 0x1be4 <Lcd_voidGoXY+0x34>
    1bde:	04 c0       	rjmp	.+8      	; 0x1be8 <Lcd_voidGoXY+0x38>
	{
	case FirstLinePos  : DDRAM_Add=FristLineAdd ; break;
    1be0:	19 82       	std	Y+1, r1	; 0x01
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <Lcd_voidGoXY+0x38>
	case SecondLinePos :DDRAM_Add=SecondLineAdd ; break;
    1be4:	80 e4       	ldi	r24, 0x40	; 64
    1be6:	89 83       	std	Y+1, r24	; 0x01
	}
	Lcd_voidSendCommand((DDRAM_Add+YPos)|LCD_SetAddressDDRAM);
    1be8:	99 81       	ldd	r25, Y+1	; 0x01
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	89 0f       	add	r24, r25
    1bee:	80 68       	ori	r24, 0x80	; 128
    1bf0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <Lcd_voidSendCommand>

}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <Lcd_voidSpecialChar>:
void Lcd_voidSpecialChar(u8 BlockNo , u8 *SpecialChar , u8 XPos,u8 YPos)
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	27 97       	sbiw	r28, 0x07	; 7
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	8b 83       	std	Y+3, r24	; 0x03
    1c1a:	7d 83       	std	Y+5, r23	; 0x05
    1c1c:	6c 83       	std	Y+4, r22	; 0x04
    1c1e:	4e 83       	std	Y+6, r20	; 0x06
    1c20:	2f 83       	std	Y+7, r18	; 0x07
	u8 CGRAM_Add ;
	u8 Counter = 0 ;
    1c22:	19 82       	std	Y+1, r1	; 0x01
	CGRAM_Add = BlockNo*LCD_CGRAMMaxSize ;
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	88 2f       	mov	r24, r24
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	8a 83       	std	Y+2, r24	; 0x02
	Lcd_voidSendCommand(CGRAM_Add|LCD_SetAddCGRAM);
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	80 64       	ori	r24, 0x40	; 64
    1c3c:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <Lcd_voidSendCommand>
	for(Counter=0;Counter<8;Counter++)
    1c40:	19 82       	std	Y+1, r1	; 0x01
    1c42:	0e c0       	rjmp	.+28     	; 0x1c60 <Lcd_voidSpecialChar+0x5c>
	{
		Lcd_voidSendData(SpecialChar[Counter]);
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4e:	fc 01       	movw	r30, r24
    1c50:	e2 0f       	add	r30, r18
    1c52:	f3 1f       	adc	r31, r19
    1c54:	80 81       	ld	r24, Z
    1c56:	0e 94 93 0b 	call	0x1726	; 0x1726 <Lcd_voidSendData>
{
	u8 CGRAM_Add ;
	u8 Counter = 0 ;
	CGRAM_Add = BlockNo*LCD_CGRAMMaxSize ;
	Lcd_voidSendCommand(CGRAM_Add|LCD_SetAddCGRAM);
	for(Counter=0;Counter<8;Counter++)
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	8f 5f       	subi	r24, 0xFF	; 255
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	88 30       	cpi	r24, 0x08	; 8
    1c64:	78 f3       	brcs	.-34     	; 0x1c44 <Lcd_voidSpecialChar+0x40>
	{
		Lcd_voidSendData(SpecialChar[Counter]);

	}
	Lcd_voidGoXY(XPos,YPos);
    1c66:	8e 81       	ldd	r24, Y+6	; 0x06
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
	Lcd_voidSendData(BlockNo);
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	0e 94 93 0b 	call	0x1726	; 0x1726 <Lcd_voidSendData>
}
    1c74:	27 96       	adiw	r28, 0x07	; 7
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <Void_Key_Pad_Init>:
		R3_Pin,
		R4_Pin
};

 void  Void_Key_Pad_Init()
 {
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <Void_Key_Pad_Init+0x6>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
	 int i ;
	 for( i = 0 ; i < Colom ; i++ )
    1c90:	1a 82       	std	Y+2, r1	; 0x02
    1c92:	19 82       	std	Y+1, r1	; 0x01
    1c94:	10 c0       	rjmp	.+32     	; 0x1cb6 <Void_Key_Pad_Init+0x30>
	 {
	 DIO_voidSetPinDir(Group_type,C_Pins[i],Output);
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	ea 5b       	subi	r30, 0xBA	; 186
    1c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca0:	90 81       	ld	r25, Z
    1ca2:	84 e0       	ldi	r24, 0x04	; 4
    1ca4:	69 2f       	mov	r22, r25
    1ca6:	41 e0       	ldi	r20, 0x01	; 1
    1ca8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_voidSetPinDir>
};

 void  Void_Key_Pad_Init()
 {
	 int i ;
	 for( i = 0 ; i < Colom ; i++ )
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	5c f3       	brlt	.-42     	; 0x1c96 <Void_Key_Pad_Init+0x10>
	 {
	 DIO_voidSetPinDir(Group_type,C_Pins[i],Output);
	 }
	 for( i = 0 ; i < Colom ; i++ )
    1cc0:	1a 82       	std	Y+2, r1	; 0x02
    1cc2:	19 82       	std	Y+1, r1	; 0x01
    1cc4:	10 c0       	rjmp	.+32     	; 0x1ce6 <Void_Key_Pad_Init+0x60>
	 {
	 DIO_voidSetPinValue(Group_type,R_Pins[i],High);
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	fc 01       	movw	r30, r24
    1ccc:	e6 5b       	subi	r30, 0xB6	; 182
    1cce:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd0:	90 81       	ld	r25, Z
    1cd2:	84 e0       	ldi	r24, 0x04	; 4
    1cd4:	69 2f       	mov	r22, r25
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
	 int i ;
	 for( i = 0 ; i < Colom ; i++ )
	 {
	 DIO_voidSetPinDir(Group_type,C_Pins[i],Output);
	 }
	 for( i = 0 ; i < Colom ; i++ )
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	9a 83       	std	Y+2, r25	; 0x02
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	84 30       	cpi	r24, 0x04	; 4
    1cec:	91 05       	cpc	r25, r1
    1cee:	5c f3       	brlt	.-42     	; 0x1cc6 <Void_Key_Pad_Init+0x40>
	 {
	 DIO_voidSetPinValue(Group_type,R_Pins[i],High);
	 }
	 for( i = 0 ; i < Row ; i++ )
    1cf0:	1a 82       	std	Y+2, r1	; 0x02
    1cf2:	19 82       	std	Y+1, r1	; 0x01
    1cf4:	10 c0       	rjmp	.+32     	; 0x1d16 <Void_Key_Pad_Init+0x90>
	 {
	 DIO_voidSetPinDir(Group_type,R_Pins[i],Input);
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	e6 5b       	subi	r30, 0xB6	; 182
    1cfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1d00:	90 81       	ld	r25, Z
    1d02:	84 e0       	ldi	r24, 0x04	; 4
    1d04:	69 2f       	mov	r22, r25
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_voidSetPinDir>
	 }
	 for( i = 0 ; i < Colom ; i++ )
	 {
	 DIO_voidSetPinValue(Group_type,R_Pins[i],High);
	 }
	 for( i = 0 ; i < Row ; i++ )
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	84 30       	cpi	r24, 0x04	; 4
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	5c f3       	brlt	.-42     	; 0x1cf6 <Void_Key_Pad_Init+0x70>
	 {
	 DIO_voidSetPinDir(Group_type,R_Pins[i],Input);
	 }

 }
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <u8_Keypad_valu>:

 u8 u8_Keypad_valu(  )
 {
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	61 97       	sbiw	r28, 0x11	; 17
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61

	 u8 C = 0 ;
    1d3e:	19 8a       	std	Y+17, r1	; 0x11
	 u8 R = 0 ;
    1d40:	18 8a       	std	Y+16, r1	; 0x10
	 u8 Value = '0';
    1d42:	80 e3       	ldi	r24, 0x30	; 48
    1d44:	8f 87       	std	Y+15, r24	; 0x0f
	// while(Value == '0')

		 for( C = 0 ; C < Colom ; C++ )
    1d46:	19 8a       	std	Y+17, r1	; 0x11
    1d48:	c3 c0       	rjmp	.+390    	; 0x1ed0 <u8_Keypad_valu+0x1a6>
		 {
			 DIO_voidSetPinValue(Group_type,C_Pins[C],Low);
    1d4a:	89 89       	ldd	r24, Y+17	; 0x11
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	fc 01       	movw	r30, r24
    1d52:	ea 5b       	subi	r30, 0xBA	; 186
    1d54:	fe 4f       	sbci	r31, 0xFE	; 254
    1d56:	90 81       	ld	r25, Z
    1d58:	84 e0       	ldi	r24, 0x04	; 4
    1d5a:	69 2f       	mov	r22, r25
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
			 for( R = 0 ; R < Row ; R++ )
    1d62:	18 8a       	std	Y+16, r1	; 0x10
    1d64:	a2 c0       	rjmp	.+324    	; 0x1eaa <u8_Keypad_valu+0x180>
			 {
				 if( !DIO_U8ReadPinValue(Group_type,R_Pins[R]))
    1d66:	88 89       	ldd	r24, Y+16	; 0x10
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	e6 5b       	subi	r30, 0xB6	; 182
    1d70:	fe 4f       	sbci	r31, 0xFE	; 254
    1d72:	90 81       	ld	r25, Z
    1d74:	84 e0       	ldi	r24, 0x04	; 4
    1d76:	69 2f       	mov	r22, r25
    1d78:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_U8ReadPinValue>
    1d7c:	88 23       	and	r24, r24
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <u8_Keypad_valu+0x58>
    1d80:	91 c0       	rjmp	.+290    	; 0x1ea4 <u8_Keypad_valu+0x17a>
				 {
					 while (!DIO_U8ReadPinValue(Group_type,R_Pins[R]))
    1d82:	88 89       	ldd	r24, Y+16	; 0x10
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	fc 01       	movw	r30, r24
    1d8a:	e6 5b       	subi	r30, 0xB6	; 182
    1d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d8e:	90 81       	ld	r25, Z
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	69 2f       	mov	r22, r25
    1d94:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_U8ReadPinValue>
    1d98:	88 23       	and	r24, r24
    1d9a:	99 f3       	breq	.-26     	; 0x1d82 <u8_Keypad_valu+0x58>
				          ;

					 Value = KeypadValueInt[R][C];
    1d9c:	88 89       	ldd	r24, Y+16	; 0x10
    1d9e:	48 2f       	mov	r20, r24
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	89 89       	ldd	r24, Y+17	; 0x11
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	ca 01       	movw	r24, r20
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	82 0f       	add	r24, r18
    1db4:	93 1f       	adc	r25, r19
    1db6:	fc 01       	movw	r30, r24
    1db8:	ea 5c       	subi	r30, 0xCA	; 202
    1dba:	fe 4f       	sbci	r31, 0xFE	; 254
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8f 87       	std	Y+15, r24	; 0x0f
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a0 e2       	ldi	r26, 0x20	; 32
    1dc6:	b1 e4       	ldi	r27, 0x41	; 65
    1dc8:	8b 87       	std	Y+11, r24	; 0x0b
    1dca:	9c 87       	std	Y+12, r25	; 0x0c
    1dcc:	ad 87       	std	Y+13, r26	; 0x0d
    1dce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	4a ef       	ldi	r20, 0xFA	; 250
    1dde:	54 e4       	ldi	r21, 0x44	; 68
    1de0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	8f 83       	std	Y+7, r24	; 0x07
    1dea:	98 87       	std	Y+8, r25	; 0x08
    1dec:	a9 87       	std	Y+9, r26	; 0x09
    1dee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df0:	6f 81       	ldd	r22, Y+7	; 0x07
    1df2:	78 85       	ldd	r23, Y+8	; 0x08
    1df4:	89 85       	ldd	r24, Y+9	; 0x09
    1df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e8       	ldi	r20, 0x80	; 128
    1dfe:	5f e3       	ldi	r21, 0x3F	; 63
    1e00:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e04:	88 23       	and	r24, r24
    1e06:	2c f4       	brge	.+10     	; 0x1e12 <u8_Keypad_valu+0xe8>
		__ticks = 1;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	8d 83       	std	Y+5, r24	; 0x05
    1e10:	3f c0       	rjmp	.+126    	; 0x1e90 <u8_Keypad_valu+0x166>
	else if (__tmp > 65535)
    1e12:	6f 81       	ldd	r22, Y+7	; 0x07
    1e14:	78 85       	ldd	r23, Y+8	; 0x08
    1e16:	89 85       	ldd	r24, Y+9	; 0x09
    1e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	3f ef       	ldi	r19, 0xFF	; 255
    1e1e:	4f e7       	ldi	r20, 0x7F	; 127
    1e20:	57 e4       	ldi	r21, 0x47	; 71
    1e22:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e26:	18 16       	cp	r1, r24
    1e28:	4c f5       	brge	.+82     	; 0x1e7c <u8_Keypad_valu+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e2       	ldi	r20, 0x20	; 32
    1e38:	51 e4       	ldi	r21, 0x41	; 65
    1e3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	bc 01       	movw	r22, r24
    1e44:	cd 01       	movw	r24, r26
    1e46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	0f c0       	rjmp	.+30     	; 0x1e72 <u8_Keypad_valu+0x148>
    1e54:	88 ec       	ldi	r24, 0xC8	; 200
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	9c 83       	std	Y+4, r25	; 0x04
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <u8_Keypad_valu+0x136>
    1e64:	9c 83       	std	Y+4, r25	; 0x04
    1e66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	69 f7       	brne	.-38     	; 0x1e54 <u8_Keypad_valu+0x12a>
    1e7a:	14 c0       	rjmp	.+40     	; 0x1ea4 <u8_Keypad_valu+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7e:	78 85       	ldd	r23, Y+8	; 0x08
    1e80:	89 85       	ldd	r24, Y+9	; 0x09
    1e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	9e 83       	std	Y+6, r25	; 0x06
    1e8e:	8d 83       	std	Y+5, r24	; 0x05
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	9a 83       	std	Y+2, r25	; 0x02
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <u8_Keypad_valu+0x172>
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
	// while(Value == '0')

		 for( C = 0 ; C < Colom ; C++ )
		 {
			 DIO_voidSetPinValue(Group_type,C_Pins[C],Low);
			 for( R = 0 ; R < Row ; R++ )
    1ea4:	88 89       	ldd	r24, Y+16	; 0x10
    1ea6:	8f 5f       	subi	r24, 0xFF	; 255
    1ea8:	88 8b       	std	Y+16, r24	; 0x10
    1eaa:	88 89       	ldd	r24, Y+16	; 0x10
    1eac:	84 30       	cpi	r24, 0x04	; 4
    1eae:	08 f4       	brcc	.+2      	; 0x1eb2 <u8_Keypad_valu+0x188>
    1eb0:	5a cf       	rjmp	.-332    	; 0x1d66 <u8_Keypad_valu+0x3c>

				        /* Delay to avoid bouncing                                                                                   */
				        _delay_ms(10);
				 }
			 }
			 DIO_voidSetPinValue(Group_type,C_Pins[C],High);
    1eb2:	89 89       	ldd	r24, Y+17	; 0x11
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	fc 01       	movw	r30, r24
    1eba:	ea 5b       	subi	r30, 0xBA	; 186
    1ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ebe:	90 81       	ld	r25, Z
    1ec0:	84 e0       	ldi	r24, 0x04	; 4
    1ec2:	69 2f       	mov	r22, r25
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
	 u8 C = 0 ;
	 u8 R = 0 ;
	 u8 Value = '0';
	// while(Value == '0')

		 for( C = 0 ; C < Colom ; C++ )
    1eca:	89 89       	ldd	r24, Y+17	; 0x11
    1ecc:	8f 5f       	subi	r24, 0xFF	; 255
    1ece:	89 8b       	std	Y+17, r24	; 0x11
    1ed0:	89 89       	ldd	r24, Y+17	; 0x11
    1ed2:	84 30       	cpi	r24, 0x04	; 4
    1ed4:	08 f4       	brcc	.+2      	; 0x1ed8 <u8_Keypad_valu+0x1ae>
    1ed6:	39 cf       	rjmp	.-398    	; 0x1d4a <u8_Keypad_valu+0x20>
				 }
			 }
			 DIO_voidSetPinValue(Group_type,C_Pins[C],High);
		 }

	 return Value ;
    1ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
 }
    1eda:	61 96       	adiw	r28, 0x11	; 17
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <Void_Buzzer_Pin>:

#include "Buzzer_Interface.h"
#include "Buzzer_Config.h"

void Void_Buzzer_Pin( u8 Buzzer_status )
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	0f 92       	push	r0
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	89 83       	std	Y+1, r24	; 0x01
		if (Buzzer_status == Buzzer_On)
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	59 f4       	brne	.+22     	; 0x1f14 <Void_Buzzer_Pin+0x28>
		{
		DIO_voidSetPinDir(Group_type , Pin_No , Output);
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	67 e0       	ldi	r22, 0x07	; 7
    1f02:	41 e0       	ldi	r20, 0x01	; 1
    1f04:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_voidSetPinDir>
		DIO_voidSetPinValue(Group_type , Pin_No , Buzzer_On);
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	67 e0       	ldi	r22, 0x07	; 7
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
    1f12:	0d c0       	rjmp	.+26     	; 0x1f2e <Void_Buzzer_Pin+0x42>
		}
		else if (Buzzer_status == Buzzer_Off)
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	88 23       	and	r24, r24
    1f18:	51 f4       	brne	.+20     	; 0x1f2e <Void_Buzzer_Pin+0x42>
		{
			DIO_voidSetPinDir(Group_type , Pin_No , Output);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	67 e0       	ldi	r22, 0x07	; 7
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_voidSetPinDir>
		    DIO_voidSetPinValue(Group_type , Pin_No , Buzzer_Off);
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	67 e0       	ldi	r22, 0x07	; 7
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_voidSetPinValue>
		}
}
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <LCD_KeyPad_App_Init>:
#include <util/delay.h>
#include "../../HAL/Buzzer/Buzzer_Interface.h"
#include "../../MCAL/EEPROM_INTERNAL/EEPROM_Interface.h"

void LCD_KeyPad_App_Init(u8 *StringPass )
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <LCD_KeyPad_App_Init+0x6>
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01
   	    Void_Key_Pad_Init();
    1f44:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <Void_Key_Pad_Init>
		Lcd_voidInit();
    1f48:	0e 94 b5 0b 	call	0x176a	; 0x176a <Lcd_voidInit>
		Lcd_voidSendWord("  ENTER PASS: ");
    1f4c:	80 e6       	ldi	r24, 0x60	; 96
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>

		EEPROM_voidWriteNBytes(0b0000000000,StringPass,Pass_Size);
    1f54:	29 81       	ldd	r18, Y+1	; 0x01
    1f56:	3a 81       	ldd	r19, Y+2	; 0x02
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	b9 01       	movw	r22, r18
    1f5e:	44 e0       	ldi	r20, 0x04	; 4
    1f60:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_voidWriteNBytes>
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <LCD_KeyPad_App_Set>:
void LCD_KeyPad_App_Set()
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	ea 97       	sbiw	r28, 0x3a	; 58
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    u8 String_Password[20];
    EEPROM_voidReadNBytes(0b0000000000,String_Password,Pass_Size);
    1f82:	9e 01       	movw	r18, r28
    1f84:	29 5d       	subi	r18, 0xD9	; 217
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	b9 01       	movw	r22, r18
    1f8e:	44 e0       	ldi	r20, 0x04	; 4
    1f90:	0e 94 3e 06 	call	0xc7c	; 0xc7c <EEPROM_voidReadNBytes>
	u16 Flag = 0 ;
    1f94:	1e a2       	std	Y+38, r1	; 0x26
    1f96:	1d a2       	std	Y+37, r1	; 0x25
    u16 Correct = 0 ;
    1f98:	1c a2       	std	Y+36, r1	; 0x24
    1f9a:	1b a2       	std	Y+35, r1	; 0x23
    u8 Counter = 0 ;
    1f9c:	1a a2       	std	Y+34, r1	; 0x22
    u16 KO = 0 ;
    1f9e:	19 a2       	std	Y+33, r1	; 0x21
    1fa0:	18 a2       	std	Y+32, r1	; 0x20
    u16 Space = 0 ;
    1fa2:	1f 8e       	std	Y+31, r1	; 0x1f
    1fa4:	1e 8e       	std	Y+30, r1	; 0x1e
    u8 press_value = '0' ;
    1fa6:	80 e3       	ldi	r24, 0x30	; 48
    1fa8:	8d 8f       	std	Y+29, r24	; 0x1d

	Space = (16-Pass_Size)/2 ;
    1faa:	86 e0       	ldi	r24, 0x06	; 6
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9f 8f       	std	Y+31, r25	; 0x1f
    1fb0:	8e 8f       	std	Y+30, r24	; 0x1e
	do{

		KO = 0 ;
    1fb2:	19 a2       	std	Y+33, r1	; 0x21
    1fb4:	18 a2       	std	Y+32, r1	; 0x20
		Counter = 0 ;
    1fb6:	1a a2       	std	Y+34, r1	; 0x22
		Flag = 0 ;
    1fb8:	1e a2       	std	Y+38, r1	; 0x26
    1fba:	1d a2       	std	Y+37, r1	; 0x25
    1fbc:	45 c0       	rjmp	.+138    	; 0x2048 <LCD_KeyPad_App_Set+0xda>
		while(String_Password[Counter]!='\0')
		{
			press_value = u8_Keypad_valu();
    1fbe:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <u8_Keypad_valu>
    1fc2:	8d 8f       	std	Y+29, r24	; 0x1d
		if(press_value == String_Password[Counter] &&  press_value  != '0')
    1fc4:	8a a1       	ldd	r24, Y+34	; 0x22
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	ce 01       	movw	r24, r28
    1fcc:	87 96       	adiw	r24, 0x27	; 39
    1fce:	fc 01       	movw	r30, r24
    1fd0:	e2 0f       	add	r30, r18
    1fd2:	f3 1f       	adc	r31, r19
    1fd4:	90 81       	ld	r25, Z
    1fd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd8:	98 17       	cp	r25, r24
    1fda:	f1 f4       	brne	.+60     	; 0x2018 <LCD_KeyPad_App_Set+0xaa>
    1fdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fde:	80 33       	cpi	r24, 0x30	; 48
    1fe0:	d9 f0       	breq	.+54     	; 0x2018 <LCD_KeyPad_App_Set+0xaa>
		{
			Counter++;
    1fe2:	8a a1       	ldd	r24, Y+34	; 0x22
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	8a a3       	std	Y+34, r24	; 0x22
			Flag++;
    1fe8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fea:	9e a1       	ldd	r25, Y+38	; 0x26
    1fec:	01 96       	adiw	r24, 0x01	; 1
    1fee:	9e a3       	std	Y+38, r25	; 0x26
    1ff0:	8d a3       	std	Y+37, r24	; 0x25
			if(KO == 0)
    1ff2:	88 a1       	ldd	r24, Y+32	; 0x20
    1ff4:	99 a1       	ldd	r25, Y+33	; 0x21
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	51 f4       	brne	.+20     	; 0x200e <LCD_KeyPad_App_Set+0xa0>
						{
						Lcd_voidGoXY(1,Space);
    1ffa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	69 2f       	mov	r22, r25
    2000:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
						KO++;
    2004:	88 a1       	ldd	r24, Y+32	; 0x20
    2006:	99 a1       	ldd	r25, Y+33	; 0x21
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	99 a3       	std	Y+33, r25	; 0x21
    200c:	88 a3       	std	Y+32, r24	; 0x20
						}
			Lcd_voidSendWord("#");
    200e:	8f e6       	ldi	r24, 0x6F	; 111
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
    2016:	18 c0       	rjmp	.+48     	; 0x2048 <LCD_KeyPad_App_Set+0xda>
		}
		else if ( press_value  != '0')
    2018:	8d 8d       	ldd	r24, Y+29	; 0x1d
    201a:	80 33       	cpi	r24, 0x30	; 48
    201c:	a9 f0       	breq	.+42     	; 0x2048 <LCD_KeyPad_App_Set+0xda>
		{
			Counter++;
    201e:	8a a1       	ldd	r24, Y+34	; 0x22
    2020:	8f 5f       	subi	r24, 0xFF	; 255
    2022:	8a a3       	std	Y+34, r24	; 0x22
			if(KO == 0)
    2024:	88 a1       	ldd	r24, Y+32	; 0x20
    2026:	99 a1       	ldd	r25, Y+33	; 0x21
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	51 f4       	brne	.+20     	; 0x2040 <LCD_KeyPad_App_Set+0xd2>
						{
						Lcd_voidGoXY(1,Space);
    202c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	69 2f       	mov	r22, r25
    2032:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
						KO++;
    2036:	88 a1       	ldd	r24, Y+32	; 0x20
    2038:	99 a1       	ldd	r25, Y+33	; 0x21
    203a:	01 96       	adiw	r24, 0x01	; 1
    203c:	99 a3       	std	Y+33, r25	; 0x21
    203e:	88 a3       	std	Y+32, r24	; 0x20
						}
			Lcd_voidSendWord("#");
    2040:	8f e6       	ldi	r24, 0x6F	; 111
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
	do{

		KO = 0 ;
		Counter = 0 ;
		Flag = 0 ;
		while(String_Password[Counter]!='\0')
    2048:	8a a1       	ldd	r24, Y+34	; 0x22
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	ce 01       	movw	r24, r28
    2050:	87 96       	adiw	r24, 0x27	; 39
    2052:	fc 01       	movw	r30, r24
    2054:	e2 0f       	add	r30, r18
    2056:	f3 1f       	adc	r31, r19
    2058:	80 81       	ld	r24, Z
    205a:	88 23       	and	r24, r24
    205c:	09 f0       	breq	.+2      	; 0x2060 <LCD_KeyPad_App_Set+0xf2>
    205e:	af cf       	rjmp	.-162    	; 0x1fbe <LCD_KeyPad_App_Set+0x50>
		}
		}



	    if( Flag < Pass_Size )
    2060:	8d a1       	ldd	r24, Y+37	; 0x25
    2062:	9e a1       	ldd	r25, Y+38	; 0x26
    2064:	84 30       	cpi	r24, 0x04	; 4
    2066:	91 05       	cpc	r25, r1
    2068:	b0 f4       	brcc	.+44     	; 0x2096 <LCD_KeyPad_App_Set+0x128>
	    {
			Lcd_voidGoXY(0,0);
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
				Lcd_voidSendWord("    try agian    ");
    2072:	81 e7       	ldi	r24, 0x71	; 113
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
				Lcd_voidGoXY(1,0);
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
				Lcd_voidSendWord("                   ");
    2082:	83 e8       	ldi	r24, 0x83	; 131
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
				Correct++ ;
    208a:	8b a1       	ldd	r24, Y+35	; 0x23
    208c:	9c a1       	ldd	r25, Y+36	; 0x24
    208e:	01 96       	adiw	r24, 0x01	; 1
    2090:	9c a3       	std	Y+36, r25	; 0x24
    2092:	8b a3       	std	Y+35, r24	; 0x23
    2094:	06 c1       	rjmp	.+524    	; 0x22a2 <LCD_KeyPad_App_Set+0x334>
	    }
	    else if(Flag == Pass_Size)
    2096:	8d a1       	ldd	r24, Y+37	; 0x25
    2098:	9e a1       	ldd	r25, Y+38	; 0x26
    209a:	84 30       	cpi	r24, 0x04	; 4
    209c:	91 05       	cpc	r25, r1
    209e:	09 f0       	breq	.+2      	; 0x20a2 <LCD_KeyPad_App_Set+0x134>
    20a0:	00 c1       	rjmp	.+512    	; 0x22a2 <LCD_KeyPad_App_Set+0x334>
	    {
	    	Flag++;
    20a2:	8d a1       	ldd	r24, Y+37	; 0x25
    20a4:	9e a1       	ldd	r25, Y+38	; 0x26
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	9e a3       	std	Y+38, r25	; 0x26
    20aa:	8d a3       	std	Y+37, r24	; 0x25
	    					Lcd_voidSendWord("#");
    20ac:	8f e6       	ldi	r24, 0x6F	; 111
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	a8 ec       	ldi	r26, 0xC8	; 200
    20ba:	b2 e4       	ldi	r27, 0x42	; 66
    20bc:	89 8f       	std	Y+25, r24	; 0x19
    20be:	9a 8f       	std	Y+26, r25	; 0x1a
    20c0:	ab 8f       	std	Y+27, r26	; 0x1b
    20c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c4:	69 8d       	ldd	r22, Y+25	; 0x19
    20c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a ef       	ldi	r20, 0xFA	; 250
    20d2:	54 e4       	ldi	r21, 0x44	; 68
    20d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8d 8b       	std	Y+21, r24	; 0x15
    20de:	9e 8b       	std	Y+22, r25	; 0x16
    20e0:	af 8b       	std	Y+23, r26	; 0x17
    20e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20e4:	6d 89       	ldd	r22, Y+21	; 0x15
    20e6:	7e 89       	ldd	r23, Y+22	; 0x16
    20e8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ea:	98 8d       	ldd	r25, Y+24	; 0x18
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e8       	ldi	r20, 0x80	; 128
    20f2:	5f e3       	ldi	r21, 0x3F	; 63
    20f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20f8:	88 23       	and	r24, r24
    20fa:	2c f4       	brge	.+10     	; 0x2106 <LCD_KeyPad_App_Set+0x198>
		__ticks = 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9c 8b       	std	Y+20, r25	; 0x14
    2102:	8b 8b       	std	Y+19, r24	; 0x13
    2104:	3f c0       	rjmp	.+126    	; 0x2184 <LCD_KeyPad_App_Set+0x216>
	else if (__tmp > 65535)
    2106:	6d 89       	ldd	r22, Y+21	; 0x15
    2108:	7e 89       	ldd	r23, Y+22	; 0x16
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	98 8d       	ldd	r25, Y+24	; 0x18
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	3f ef       	ldi	r19, 0xFF	; 255
    2112:	4f e7       	ldi	r20, 0x7F	; 127
    2114:	57 e4       	ldi	r21, 0x47	; 71
    2116:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    211a:	18 16       	cp	r1, r24
    211c:	4c f5       	brge	.+82     	; 0x2170 <LCD_KeyPad_App_Set+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211e:	69 8d       	ldd	r22, Y+25	; 0x19
    2120:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2122:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2124:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e2       	ldi	r20, 0x20	; 32
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9c 8b       	std	Y+20, r25	; 0x14
    2144:	8b 8b       	std	Y+19, r24	; 0x13
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <LCD_KeyPad_App_Set+0x1f8>
    2148:	88 ec       	ldi	r24, 0xC8	; 200
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	9a 8b       	std	Y+18, r25	; 0x12
    214e:	89 8b       	std	Y+17, r24	; 0x11
    2150:	89 89       	ldd	r24, Y+17	; 0x11
    2152:	9a 89       	ldd	r25, Y+18	; 0x12
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <LCD_KeyPad_App_Set+0x1e6>
    2158:	9a 8b       	std	Y+18, r25	; 0x12
    215a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215c:	8b 89       	ldd	r24, Y+19	; 0x13
    215e:	9c 89       	ldd	r25, Y+20	; 0x14
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	9c 8b       	std	Y+20, r25	; 0x14
    2164:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	69 f7       	brne	.-38     	; 0x2148 <LCD_KeyPad_App_Set+0x1da>
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <LCD_KeyPad_App_Set+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2170:	6d 89       	ldd	r22, Y+21	; 0x15
    2172:	7e 89       	ldd	r23, Y+22	; 0x16
    2174:	8f 89       	ldd	r24, Y+23	; 0x17
    2176:	98 8d       	ldd	r25, Y+24	; 0x18
    2178:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9c 8b       	std	Y+20, r25	; 0x14
    2182:	8b 8b       	std	Y+19, r24	; 0x13
    2184:	8b 89       	ldd	r24, Y+19	; 0x13
    2186:	9c 89       	ldd	r25, Y+20	; 0x14
    2188:	98 8b       	std	Y+16, r25	; 0x10
    218a:	8f 87       	std	Y+15, r24	; 0x0f
    218c:	8f 85       	ldd	r24, Y+15	; 0x0f
    218e:	98 89       	ldd	r25, Y+16	; 0x10
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_KeyPad_App_Set+0x222>
    2194:	98 8b       	std	Y+16, r25	; 0x10
    2196:	8f 87       	std	Y+15, r24	; 0x0f
	    					_delay_ms(100);
	    					Lcd_voidGoXY(0,0);
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
	    					Lcd_voidSendWord("     Welcome     ");
    21a0:	87 e9       	ldi	r24, 0x97	; 151
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
	    					Lcd_voidGoXY(1,0);
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
	    					Lcd_voidSendWord("                   ");
    21b0:	83 e8       	ldi	r24, 0x83	; 131
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e8       	ldi	r25, 0x80	; 128
    21bc:	ab e3       	ldi	r26, 0x3B	; 59
    21be:	b5 e4       	ldi	r27, 0x45	; 69
    21c0:	8b 87       	std	Y+11, r24	; 0x0b
    21c2:	9c 87       	std	Y+12, r25	; 0x0c
    21c4:	ad 87       	std	Y+13, r26	; 0x0d
    21c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    21cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	4a ef       	ldi	r20, 0xFA	; 250
    21d6:	54 e4       	ldi	r21, 0x44	; 68
    21d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	8f 83       	std	Y+7, r24	; 0x07
    21e2:	98 87       	std	Y+8, r25	; 0x08
    21e4:	a9 87       	std	Y+9, r26	; 0x09
    21e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ea:	78 85       	ldd	r23, Y+8	; 0x08
    21ec:	89 85       	ldd	r24, Y+9	; 0x09
    21ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	5f e3       	ldi	r21, 0x3F	; 63
    21f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21fc:	88 23       	and	r24, r24
    21fe:	2c f4       	brge	.+10     	; 0x220a <LCD_KeyPad_App_Set+0x29c>
		__ticks = 1;
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9e 83       	std	Y+6, r25	; 0x06
    2206:	8d 83       	std	Y+5, r24	; 0x05
    2208:	3f c0       	rjmp	.+126    	; 0x2288 <LCD_KeyPad_App_Set+0x31a>
	else if (__tmp > 65535)
    220a:	6f 81       	ldd	r22, Y+7	; 0x07
    220c:	78 85       	ldd	r23, Y+8	; 0x08
    220e:	89 85       	ldd	r24, Y+9	; 0x09
    2210:	9a 85       	ldd	r25, Y+10	; 0x0a
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	3f ef       	ldi	r19, 0xFF	; 255
    2216:	4f e7       	ldi	r20, 0x7F	; 127
    2218:	57 e4       	ldi	r21, 0x47	; 71
    221a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    221e:	18 16       	cp	r1, r24
    2220:	4c f5       	brge	.+82     	; 0x2274 <LCD_KeyPad_App_Set+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2222:	6b 85       	ldd	r22, Y+11	; 0x0b
    2224:	7c 85       	ldd	r23, Y+12	; 0x0c
    2226:	8d 85       	ldd	r24, Y+13	; 0x0d
    2228:	9e 85       	ldd	r25, Y+14	; 0x0e
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e2       	ldi	r20, 0x20	; 32
    2230:	51 e4       	ldi	r21, 0x41	; 65
    2232:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9e 83       	std	Y+6, r25	; 0x06
    2248:	8d 83       	std	Y+5, r24	; 0x05
    224a:	0f c0       	rjmp	.+30     	; 0x226a <LCD_KeyPad_App_Set+0x2fc>
    224c:	88 ec       	ldi	r24, 0xC8	; 200
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9c 83       	std	Y+4, r25	; 0x04
    2252:	8b 83       	std	Y+3, r24	; 0x03
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_KeyPad_App_Set+0x2ea>
    225c:	9c 83       	std	Y+4, r25	; 0x04
    225e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2260:	8d 81       	ldd	r24, Y+5	; 0x05
    2262:	9e 81       	ldd	r25, Y+6	; 0x06
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	69 f7       	brne	.-38     	; 0x224c <LCD_KeyPad_App_Set+0x2de>
    2272:	14 c0       	rjmp	.+40     	; 0x229c <LCD_KeyPad_App_Set+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2274:	6f 81       	ldd	r22, Y+7	; 0x07
    2276:	78 85       	ldd	r23, Y+8	; 0x08
    2278:	89 85       	ldd	r24, Y+9	; 0x09
    227a:	9a 85       	ldd	r25, Y+10	; 0x0a
    227c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9e 83       	std	Y+6, r25	; 0x06
    2286:	8d 83       	std	Y+5, r24	; 0x05
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	9e 81       	ldd	r25, Y+6	; 0x06
    228c:	9a 83       	std	Y+2, r25	; 0x02
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	9a 81       	ldd	r25, Y+2	; 0x02
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_KeyPad_App_Set+0x326>
    2298:	9a 83       	std	Y+2, r25	; 0x02
    229a:	89 83       	std	Y+1, r24	; 0x01
	    					_delay_ms(3000);
	    					AddtionCorract();
    229c:	0e 94 83 11 	call	0x2306	; 0x2306 <AddtionCorract>
    22a0:	06 c0       	rjmp	.+12     	; 0x22ae <LCD_KeyPad_App_Set+0x340>
	    					break;
	    }

	}while(Correct< Failed_NO );
    22a2:	8b a1       	ldd	r24, Y+35	; 0x23
    22a4:	9c a1       	ldd	r25, Y+36	; 0x24
    22a6:	83 30       	cpi	r24, 0x03	; 3
    22a8:	91 05       	cpc	r25, r1
    22aa:	08 f4       	brcc	.+2      	; 0x22ae <LCD_KeyPad_App_Set+0x340>
    22ac:	82 ce       	rjmp	.-764    	; 0x1fb2 <LCD_KeyPad_App_Set+0x44>

		if (Correct >= Failed_NO)
    22ae:	8b a1       	ldd	r24, Y+35	; 0x23
    22b0:	9c a1       	ldd	r25, Y+36	; 0x24
    22b2:	83 30       	cpi	r24, 0x03	; 3
    22b4:	91 05       	cpc	r25, r1
    22b6:	f0 f0       	brcs	.+60     	; 0x22f4 <LCD_KeyPad_App_Set+0x386>
		{
			Lcd_voidGoXY(0,0);
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
				Lcd_voidSendWord("     wrong ");
    22c0:	89 ea       	ldi	r24, 0xA9	; 169
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>

				Lcd_voidSpecialChar(1,Charcter,0,11);
    22c8:	2e e4       	ldi	r18, 0x4E	; 78
    22ca:	31 e0       	ldi	r19, 0x01	; 1
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	b9 01       	movw	r22, r18
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	2b e0       	ldi	r18, 0x0B	; 11
    22d4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <Lcd_voidSpecialChar>
				Lcd_voidSendWord("    ");
    22d8:	85 eb       	ldi	r24, 0xB5	; 181
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
				Lcd_voidGoXY(1,0);
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
				Lcd_voidSendWord("                   ");
    22e8:	83 e8       	ldi	r24, 0x83	; 131
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
				AddtionWrong();
    22f0:	0e 94 0d 12 	call	0x241a	; 0x241a <AddtionWrong>
		}
}
    22f4:	ea 96       	adiw	r28, 0x3a	; 58
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <AddtionCorract>:
AddtionCorract()
{
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	29 97       	sbiw	r28, 0x09	; 9
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
	u8 press_value = '0' ;
    231e:	80 e3       	ldi	r24, 0x30	; 48
    2320:	8b 83       	std	Y+3, r24	; 0x03
	Lcd_voidGoXY(0,0);
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
    Lcd_voidSendWord("  change Password ?    ");
    232a:	8a eb       	ldi	r24, 0xBA	; 186
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
    Lcd_voidGoXY(1,0);
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
    Lcd_voidSendWord("  1:Yes     2:No          ");
    233a:	82 ed       	ldi	r24, 0xD2	; 210
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
    u8 size = Pass_Size;
    2342:	84 e0       	ldi	r24, 0x04	; 4
    2344:	8a 83       	std	Y+2, r24	; 0x02
    u8 Value[6];
    u8 i = 0 ;
    2346:	19 82       	std	Y+1, r1	; 0x01

    	press_value = u8_Keypad_valu();
    2348:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <u8_Keypad_valu>
    234c:	8b 83       	std	Y+3, r24	; 0x03

    if(press_value =='1'&&  press_value  != '0')
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	81 33       	cpi	r24, 0x31	; 49
    2352:	d1 f5       	brne	.+116    	; 0x23c8 <AddtionCorract+0xc2>
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	80 33       	cpi	r24, 0x30	; 48
    2358:	b9 f1       	breq	.+110    	; 0x23c8 <AddtionCorract+0xc2>
    {
    	Lcd_voidGoXY(1,0);
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
    				Lcd_voidSendWord("                      ");
    2362:	8d ee       	ldi	r24, 0xED	; 237
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
    				Lcd_voidGoXY(0,0);
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	60 e0       	ldi	r22, 0x00	; 0
    236e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
    				    				Lcd_voidSendWord("                     ");
    2372:	84 e0       	ldi	r24, 0x04	; 4
    2374:	91 e0       	ldi	r25, 0x01	; 1
    2376:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
    237a:	1a c0       	rjmp	.+52     	; 0x23b0 <AddtionCorract+0xaa>

    	while(size != 0)
    	{
    		Value[i]=u8_Keypad_valu();
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	08 2f       	mov	r16, r24
    2380:	10 e0       	ldi	r17, 0x00	; 0
    2382:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <u8_Keypad_valu>
    2386:	28 2f       	mov	r18, r24
    2388:	ce 01       	movw	r24, r28
    238a:	04 96       	adiw	r24, 0x04	; 4
    238c:	fc 01       	movw	r30, r24
    238e:	e0 0f       	add	r30, r16
    2390:	f1 1f       	adc	r31, r17
    2392:	20 83       	st	Z, r18
    		Lcd_voidGoXY(0,5);
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	65 e0       	ldi	r22, 0x05	; 5
    2398:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
    		Lcd_voidSendWord("#");
    239c:	8f e6       	ldi	r24, 0x6F	; 111
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
    		i++ ;
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	8f 5f       	subi	r24, 0xFF	; 255
    23a8:	89 83       	std	Y+1, r24	; 0x01
    		size-- ;
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	81 50       	subi	r24, 0x01	; 1
    23ae:	8a 83       	std	Y+2, r24	; 0x02
    	Lcd_voidGoXY(1,0);
    				Lcd_voidSendWord("                      ");
    				Lcd_voidGoXY(0,0);
    				    				Lcd_voidSendWord("                     ");

    	while(size != 0)
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	88 23       	and	r24, r24
    23b4:	19 f7       	brne	.-58     	; 0x237c <AddtionCorract+0x76>
    		Lcd_voidGoXY(0,5);
    		Lcd_voidSendWord("#");
    		i++ ;
    		size-- ;
    	}
      EEPROM_voidWriteNBytes(0b0000000000,Value,Pass_Size);
    23b6:	9e 01       	movw	r18, r28
    23b8:	2c 5f       	subi	r18, 0xFC	; 252
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	b9 01       	movw	r22, r18
    23c2:	44 e0       	ldi	r20, 0x04	; 4
    23c4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_voidWriteNBytes>

    }
     if(press_value ==   '2'&&  press_value  != '0')
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	82 33       	cpi	r24, 0x32	; 50
    23cc:	d9 f4       	brne	.+54     	; 0x2404 <AddtionCorract+0xfe>
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	80 33       	cpi	r24, 0x30	; 48
    23d2:	c1 f0       	breq	.+48     	; 0x2404 <AddtionCorract+0xfe>
    {
    	 Lcd_voidGoXY(0,0);
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
    	     Lcd_voidSendWord(" Thank you    ");
    23dc:	8a e1       	ldi	r24, 0x1A	; 26
    23de:	91 e0       	ldi	r25, 0x01	; 1
    23e0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
    	     Lcd_voidSpecialChar(1,Charcter,0,11);
    23e4:	2e e4       	ldi	r18, 0x4E	; 78
    23e6:	31 e0       	ldi	r19, 0x01	; 1
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	b9 01       	movw	r22, r18
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	2b e0       	ldi	r18, 0x0B	; 11
    23f0:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <Lcd_voidSpecialChar>
    	     Lcd_voidGoXY(1,0);
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	60 e0       	ldi	r22, 0x00	; 0
    23f8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Lcd_voidGoXY>
    	     Lcd_voidSendWord("  1:Yes     2:No          ");
    23fc:	82 ed       	ldi	r24, 0xD2	; 210
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_voidSendWord>
	/* servo open door*/
	/* button */
	/* eeprom*/


}
    2404:	29 96       	adiw	r28, 0x09	; 9
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	08 95       	ret

0000241a <AddtionWrong>:




AddtionWrong()
    {
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
	//*  wrong password */

    }
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <main>:
 */

#include "App/LCD_KeyPad_APP/LCD_KeyPad_Interface.h"

void main()
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
LCD_KeyPad_App_Init("1234");
    2430:	89 e2       	ldi	r24, 0x29	; 41
    2432:	91 e0       	ldi	r25, 0x01	; 1
    2434:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <LCD_KeyPad_App_Init>
LCD_KeyPad_App_Set();
    2438:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <LCD_KeyPad_App_Set>

}
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <__prologue_saves__>:
    2442:	2f 92       	push	r2
    2444:	3f 92       	push	r3
    2446:	4f 92       	push	r4
    2448:	5f 92       	push	r5
    244a:	6f 92       	push	r6
    244c:	7f 92       	push	r7
    244e:	8f 92       	push	r8
    2450:	9f 92       	push	r9
    2452:	af 92       	push	r10
    2454:	bf 92       	push	r11
    2456:	cf 92       	push	r12
    2458:	df 92       	push	r13
    245a:	ef 92       	push	r14
    245c:	ff 92       	push	r15
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	ca 1b       	sub	r28, r26
    246c:	db 0b       	sbc	r29, r27
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	09 94       	ijmp

0000247a <__epilogue_restores__>:
    247a:	2a 88       	ldd	r2, Y+18	; 0x12
    247c:	39 88       	ldd	r3, Y+17	; 0x11
    247e:	48 88       	ldd	r4, Y+16	; 0x10
    2480:	5f 84       	ldd	r5, Y+15	; 0x0f
    2482:	6e 84       	ldd	r6, Y+14	; 0x0e
    2484:	7d 84       	ldd	r7, Y+13	; 0x0d
    2486:	8c 84       	ldd	r8, Y+12	; 0x0c
    2488:	9b 84       	ldd	r9, Y+11	; 0x0b
    248a:	aa 84       	ldd	r10, Y+10	; 0x0a
    248c:	b9 84       	ldd	r11, Y+9	; 0x09
    248e:	c8 84       	ldd	r12, Y+8	; 0x08
    2490:	df 80       	ldd	r13, Y+7	; 0x07
    2492:	ee 80       	ldd	r14, Y+6	; 0x06
    2494:	fd 80       	ldd	r15, Y+5	; 0x05
    2496:	0c 81       	ldd	r16, Y+4	; 0x04
    2498:	1b 81       	ldd	r17, Y+3	; 0x03
    249a:	aa 81       	ldd	r26, Y+2	; 0x02
    249c:	b9 81       	ldd	r27, Y+1	; 0x01
    249e:	ce 0f       	add	r28, r30
    24a0:	d1 1d       	adc	r29, r1
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	ed 01       	movw	r28, r26
    24ae:	08 95       	ret

000024b0 <_exit>:
    24b0:	f8 94       	cli

000024b2 <__stop_program>:
    24b2:	ff cf       	rjmp	.-2      	; 0x24b2 <__stop_program>
